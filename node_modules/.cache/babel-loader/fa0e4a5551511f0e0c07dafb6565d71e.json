{"ast":null,"code":"var _jsxFileName = \"/home/thomas/navebe/front/src/components/data_area/DataArea.js\";\nimport React, { useEffect, useState } from 'react';\nimport Navbar from '../navbar/Navbar';\nimport MenuBurger from '../menuBurger/MenuBurger';\nimport url from '../../api/url';\nimport './DataArea.scss';\n\nconst DataArea = () => {\n  const [mails, setMails] = useState();\n  const [userId, setUserId] = useState();\n  const [modelId, setModelId] = useState();\n  const [token, setToken] = useState();\n  const [choiceModel, setChoiceModel] = useState('Tout');\n  const [choiceCategory, setChoiceCategory] = useState('Tout');\n  const [models, setModels] = useState([]);\n  const [selectModel, setSelectModel] = useState(false);\n  const [categorys, setCategorys] = useState([]);\n  const [categorySelect, setCategorySelect] = useState();\n  const [selectCategory, setSelectCategory] = useState(false);\n  const [categoryId, setCategoryId] = useState();\n  const [contacts, setContacts] = useState([]);\n  const [chooseColor, setChooseColor] = useState(false);\n  const [chooseColorId, setChooseColorId] = useState();\n  useEffect(() => {\n    if (localStorage.getItem('userId')) {\n      setUserId(localStorage.getItem('userId'));\n      setToken(localStorage.getItem('token'));\n    } else {\n      setUserId(sessionStorage.getItem('userId'));\n      setToken(sessionStorage.getItem('token'));\n    }\n  }, []);\n  useEffect(() => {\n    findAll();\n  }, [userId, token, modelId]);\n  console.log(userId);\n\n  const findAll = () => {\n    fetch(`${url}/mail/findByUser/${userId}`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Acces-Control-Allow-Origin': {\n          origin\n        },\n        'authorization': token\n      }\n    }).then(res => res.json()).then(res => console.log(res));\n  };\n\n  useEffect(() => {\n    fetch(`${url}/model/findAll/${userId}`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Acces-Control-Allow-Origin': {\n          origin\n        },\n        'authorization': token\n      }\n    }).then(res => res.json()).then(res => setModels(res));\n  }, [userId, token]);\n  useEffect(() => {\n    fetch(`${url}/category/findAll/${userId}/${modelId}`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Acces-Control-Allow-Origin': {\n          origin\n        },\n        'authorization': token\n      }\n    }).then(res => res.json()).then(res => {\n      setCategorys(res);\n      if (!categorySelect && res[0]) setCategorySelect(res[0].id);\n    });\n  }, [userId, modelId]);\n  useEffect(() => {\n    fetch(`${url}/mail/find/${userId}/${modelId}/${categoryId}`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Acces-Control-Allow-Origin': {\n          origin\n        },\n        'authorization': token\n      }\n    }).then(res => res.json()).then(res => {\n      setContacts(res);\n    });\n  }, [categoryId, userId, modelId, chooseColorId, chooseColor]);\n\n  const modelSelectFunction = model => {\n    console.log(model.id);\n    setSelectModel(false);\n    setChoiceModel(model.name);\n    setModelId(model.id);\n  };\n\n  const categorySelectFunction = category => {\n    setSelectCategory(false);\n    setChoiceCategory(category.name);\n    setCategoryId(category.id);\n  };\n\n  const changeColor = (mailId, color) => {\n    fetch(`${url}/mail/update/${userId}/${modelId}/${categoryId}/${mailId}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': `${origin}`,\n        'authorization': token\n      },\n      body: JSON.stringify({\n        color: color\n      })\n    });\n    setChooseColor(false);\n  };\n\n  console.log(contacts);\n  return React.createElement(\"div\", {\n    className: \"containerModelArea\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }, window.innerWidth > 1280 ? React.createElement(Navbar, {\n    type: \"data\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }) : React.createElement(MenuBurger, {\n    type: \"models\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"headSearchData\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"choiceSearchData\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    onClick: () => {\n      setSelectModel(!selectModel);\n    },\n    className: \"textChoiceDataGet\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139\n    },\n    __self: this\n  }, choiceModel)), choiceModel !== 'Tout' && React.createElement(\"div\", {\n    className: \"choiceSearchData\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    onClick: () => {\n      setSelectCategory(!selectCategory);\n    },\n    className: \"textChoiceDataGet\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  }, choiceCategory))), React.createElement(\"div\", {\n    className: \"contentDataArea\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  }, selectModel && React.createElement(\"div\", {\n    className: \"listModelsData\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  }, models.length && models.map(model => {\n    return React.createElement(\"p\", {\n      className: \"textChoiceData\",\n      onClick: () => {\n        modelSelectFunction(model);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, model.name);\n  })), selectCategory && React.createElement(\"div\", {\n    className: \"listCategorysData\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156\n    },\n    __self: this\n  }, categorys.length && categorys.map(category => {\n    return React.createElement(\"p\", {\n      className: \"textChoiceData\",\n      onClick: () => {\n        categorySelectFunction(category);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, category.name);\n  })), contacts.length && contacts.map((contact, index) => {\n    return React.createElement(\"div\", {\n      className: indexcontact.color ? `containerContact${contact.color}` : \"containerContact\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: \"contentInfoContact\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }, contact.phone), React.createElement(\"p\", {\n      className: \"contentInfoContact\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }, contact.email), React.createElement(\"div\", {\n      className: \"containerColors\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }, !contact.color ? React.createElement(\"img\", {\n      onClick: () => {\n        setChooseColor(!chooseColor);\n        setChooseColorId(contact.id);\n      },\n      src: require('./image/color_icon.png'),\n      className: \"colorIcon\",\n      alt: \"choose color\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }) : React.createElement(\"div\", {\n      onClick: () => {\n        setChooseColor(!chooseColor);\n        setChooseColorId(contact.id);\n      },\n      className: `colorIcon${contact.color}`,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }), chooseColor && chooseColorId === contact.id && React.createElement(\"div\", {\n      className: \"containerChoiceColor\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      onClick: () => {\n        changeColor(contact.id, \"Green\");\n      },\n      className: \"colorGreen\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      onClick: () => {\n        changeColor(contact.id, \"Blue\");\n      },\n      className: \"colorBlue\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      onClick: () => {\n        changeColor(contact.id, \"Orange\");\n      },\n      className: \"colorOrange\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      onClick: () => {\n        changeColor(contact.id, \"Red\");\n      },\n      className: \"colorRed\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }))));\n  })));\n};\n\nexport default DataArea;","map":{"version":3,"sources":["/home/thomas/navebe/front/src/components/data_area/DataArea.js"],"names":["React","useEffect","useState","Navbar","MenuBurger","url","DataArea","mails","setMails","userId","setUserId","modelId","setModelId","token","setToken","choiceModel","setChoiceModel","choiceCategory","setChoiceCategory","models","setModels","selectModel","setSelectModel","categorys","setCategorys","categorySelect","setCategorySelect","selectCategory","setSelectCategory","categoryId","setCategoryId","contacts","setContacts","chooseColor","setChooseColor","chooseColorId","setChooseColorId","localStorage","getItem","sessionStorage","findAll","console","log","fetch","method","headers","origin","then","res","json","id","modelSelectFunction","model","name","categorySelectFunction","category","changeColor","mailId","color","body","JSON","stringify","window","innerWidth","length","map","contact","index","indexcontact","phone","email","require"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,OAAOC,GAAP,MAAgB,eAAhB;AACA,OAAO,iBAAP;;AAGA,MAAMC,QAAQ,GAAG,MAAM;AACnB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,EAAlC;AACA,QAAM,CAACO,MAAD,EAASC,SAAT,IAAsBR,QAAQ,EAApC;AACA,QAAM,CAACS,OAAD,EAAUC,UAAV,IAAwBV,QAAQ,EAAtC;AACA,QAAM,CAACW,KAAD,EAAQC,QAAR,IAAoBZ,QAAQ,EAAlC;AACA,QAAM,CAACa,WAAD,EAAcC,cAAd,IAAgCd,QAAQ,CAAC,MAAD,CAA9C;AACA,QAAM,CAACe,cAAD,EAAiBC,iBAAjB,IAAsChB,QAAQ,CAAC,MAAD,CAApD;AACA,QAAM,CAACiB,MAAD,EAASC,SAAT,IAAsBlB,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACmB,WAAD,EAAcC,cAAd,IAAgCpB,QAAQ,CAAC,KAAD,CAA9C;AACA,QAAM,CAACqB,SAAD,EAAYC,YAAZ,IAA4BtB,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACuB,cAAD,EAAiBC,iBAAjB,IAAsCxB,QAAQ,EAApD;AACA,QAAM,CAACyB,cAAD,EAAiBC,iBAAjB,IAAsC1B,QAAQ,CAAC,KAAD,CAApD;AACA,QAAM,CAAC2B,UAAD,EAAaC,aAAb,IAA8B5B,QAAQ,EAA5C;AACA,QAAM,CAAC6B,QAAD,EAAWC,WAAX,IAA0B9B,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAAC+B,WAAD,EAAcC,cAAd,IAAgChC,QAAQ,CAAC,KAAD,CAA9C;AACA,QAAM,CAACiC,aAAD,EAAgBC,gBAAhB,IAAoClC,QAAQ,EAAlD;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIoC,YAAY,CAACC,OAAb,CAAqB,QAArB,CAAJ,EAAoC;AAChC5B,MAAAA,SAAS,CAAC2B,YAAY,CAACC,OAAb,CAAqB,QAArB,CAAD,CAAT;AACAxB,MAAAA,QAAQ,CAACuB,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAD,CAAR;AACH,KAHD,MAGO;AACH5B,MAAAA,SAAS,CAAC6B,cAAc,CAACD,OAAf,CAAuB,QAAvB,CAAD,CAAT;AACAxB,MAAAA,QAAQ,CAACyB,cAAc,CAACD,OAAf,CAAuB,OAAvB,CAAD,CAAR;AACH;AACJ,GARQ,EAQN,EARM,CAAT;AAUArC,EAAAA,SAAS,CAAC,MAAM;AACZuC,IAAAA,OAAO;AACV,GAFQ,EAEN,CAAC/B,MAAD,EAASI,KAAT,EAAgBF,OAAhB,CAFM,CAAT;AAIA8B,EAAAA,OAAO,CAACC,GAAR,CAAYjC,MAAZ;;AAEA,QAAM+B,OAAO,GAAG,MAAM;AAClBG,IAAAA,KAAK,CAAE,GAAEtC,GAAI,oBAAmBI,MAAO,EAAlC,EAAqC;AACtCmC,MAAAA,MAAM,EAAE,KAD8B;AAEtCC,MAAAA,OAAO,EAAE;AACL,wBAAgB,kBADX;AAEL,sCAA8B;AAAEC,UAAAA;AAAF,SAFzB;AAGL,yBAAiBjC;AAHZ;AAF6B,KAArC,CAAL,CAQKkC,IARL,CAQUC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EARjB,EASKF,IATL,CASUC,GAAG,IAAIP,OAAO,CAACC,GAAR,CAAYM,GAAZ,CATjB;AAUH,GAXD;;AAaA/C,EAAAA,SAAS,CAAC,MAAM;AACZ0C,IAAAA,KAAK,CAAE,GAAEtC,GAAI,kBAAiBI,MAAO,EAAhC,EAAmC;AACpCmC,MAAAA,MAAM,EAAE,KAD4B;AAEpCC,MAAAA,OAAO,EAAE;AACL,wBAAgB,kBADX;AAEL,sCAA8B;AAAEC,UAAAA;AAAF,SAFzB;AAGL,yBAAiBjC;AAHZ;AAF2B,KAAnC,CAAL,CAQKkC,IARL,CAQUC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EARjB,EASKF,IATL,CASUC,GAAG,IAAI5B,SAAS,CAAC4B,GAAD,CAT1B;AAUH,GAXQ,EAWN,CAACvC,MAAD,EAASI,KAAT,CAXM,CAAT;AAaAZ,EAAAA,SAAS,CAAC,MAAM;AACZ0C,IAAAA,KAAK,CAAE,GAAEtC,GAAI,qBAAoBI,MAAO,IAAGE,OAAQ,EAA9C,EAAiD;AAClDiC,MAAAA,MAAM,EAAE,KAD0C;AAElDC,MAAAA,OAAO,EAAE;AACL,wBAAgB,kBADX;AAEL,sCAA8B;AAAEC,UAAAA;AAAF,SAFzB;AAGL,yBAAiBjC;AAHZ;AAFyC,KAAjD,CAAL,CAQKkC,IARL,CAQUC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EARjB,EASKF,IATL,CASUC,GAAG,IAAI;AACTxB,MAAAA,YAAY,CAACwB,GAAD,CAAZ;AACA,UAAI,CAACvB,cAAD,IAAmBuB,GAAG,CAAC,CAAD,CAA1B,EAA+BtB,iBAAiB,CAACsB,GAAG,CAAC,CAAD,CAAH,CAAOE,EAAR,CAAjB;AAClC,KAZL;AAaH,GAdQ,EAcN,CAACzC,MAAD,EAASE,OAAT,CAdM,CAAT;AAgBAV,EAAAA,SAAS,CAAC,MAAM;AACZ0C,IAAAA,KAAK,CAAE,GAAEtC,GAAI,cAAaI,MAAO,IAAGE,OAAQ,IAAGkB,UAAW,EAArD,EAAwD;AACzDe,MAAAA,MAAM,EAAE,KADiD;AAEzDC,MAAAA,OAAO,EAAE;AACL,wBAAgB,kBADX;AAEL,sCAA8B;AAAEC,UAAAA;AAAF,SAFzB;AAGL,yBAAiBjC;AAHZ;AAFgD,KAAxD,CAAL,CAQKkC,IARL,CAQUC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EARjB,EASKF,IATL,CASUC,GAAG,IAAI;AACThB,MAAAA,WAAW,CAACgB,GAAD,CAAX;AACH,KAXL;AAYH,GAbQ,EAaN,CAACnB,UAAD,EAAapB,MAAb,EAAqBE,OAArB,EAA8BwB,aAA9B,EAA6CF,WAA7C,CAbM,CAAT;;AAiBA,QAAMkB,mBAAmB,GAAIC,KAAD,IAAW;AACnCX,IAAAA,OAAO,CAACC,GAAR,CAAYU,KAAK,CAACF,EAAlB;AACA5B,IAAAA,cAAc,CAAC,KAAD,CAAd;AACAN,IAAAA,cAAc,CAACoC,KAAK,CAACC,IAAP,CAAd;AACAzC,IAAAA,UAAU,CAACwC,KAAK,CAACF,EAAP,CAAV;AACH,GALD;;AAOA,QAAMI,sBAAsB,GAAIC,QAAD,IAAc;AACzC3B,IAAAA,iBAAiB,CAAC,KAAD,CAAjB;AACAV,IAAAA,iBAAiB,CAACqC,QAAQ,CAACF,IAAV,CAAjB;AACAvB,IAAAA,aAAa,CAACyB,QAAQ,CAACL,EAAV,CAAb;AACH,GAJD;;AAMA,QAAMM,WAAW,GAAG,CAACC,MAAD,EAASC,KAAT,KAAmB;AACnCf,IAAAA,KAAK,CAAE,GAAEtC,GAAI,gBAAeI,MAAO,IAAGE,OAAQ,IAAGkB,UAAW,IAAG4B,MAAO,EAAjE,EAAoE;AACrEb,MAAAA,MAAM,EAAE,KAD6D;AAErEC,MAAAA,OAAO,EAAE;AACP,wBAAgB,kBADT;AAEP,uCAAgC,GAAEC,MAAO,EAFlC;AAGP,yBAAiBjC;AAHV,OAF4D;AAOrE8C,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjBH,QAAAA,KAAK,EAAGA;AADS,OAAf;AAP+D,KAApE,CAAL;AAWAxB,IAAAA,cAAc,CAAC,KAAD,CAAd;AACH,GAbD;;AAgBAO,EAAAA,OAAO,CAACC,GAAR,CAAYX,QAAZ;AAEA,SACI;AAAK,IAAA,SAAS,EAAC,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACK+B,MAAM,CAACC,UAAP,GAAoB,IAApB,GACG,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAE,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADH,GAGG,oBAAC,UAAD;AAAY,IAAA,IAAI,EAAE,QAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJR,EAKI;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAK,IAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAG,IAAA,OAAO,EAAE,MAAM;AAAEzC,MAAAA,cAAc,CAAC,CAACD,WAAF,CAAd;AAA8B,KAAlD;AAAoD,IAAA,SAAS,EAAC,mBAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAmFN,WAAnF,CADJ,CADJ,EAIKA,WAAW,KAAK,MAAhB,IACG;AAAK,IAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAG,IAAA,OAAO,EAAE,MAAM;AAAEa,MAAAA,iBAAiB,CAAC,CAACD,cAAF,CAAjB;AAAoC,KAAxD;AAA0D,IAAA,SAAS,EAAC,mBAApE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAyFV,cAAzF,CADJ,CALR,CALJ,EAcI;AAAK,IAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKI,WAAW,IACR;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKF,MAAM,CAAC6C,MAAP,IAAiB7C,MAAM,CAAC8C,GAAP,CAAWb,KAAK,IAAI;AAClC,WACI;AAAG,MAAA,SAAS,EAAC,gBAAb;AAA8B,MAAA,OAAO,EAAE,MAAM;AAAED,QAAAA,mBAAmB,CAACC,KAAD,CAAnB;AAA4B,OAA3E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA8EA,KAAK,CAACC,IAApF,CADJ;AAGH,GAJiB,CADtB,CAFR,EASK1B,cAAc,IACX;AAAK,IAAA,SAAS,EAAC,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKJ,SAAS,CAACyC,MAAV,IAAoBzC,SAAS,CAAC0C,GAAV,CAAcV,QAAQ,IAAI;AAC3C,WACI;AAAG,MAAA,SAAS,EAAC,gBAAb;AAA8B,MAAA,OAAO,EAAE,MAAM;AAAED,QAAAA,sBAAsB,CAACC,QAAD,CAAtB;AAAkC,OAAjF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAoFA,QAAQ,CAACF,IAA7F,CADJ;AAGH,GAJoB,CADzB,CAVR,EAiBKtB,QAAQ,CAACiC,MAAT,IAAmBjC,QAAQ,CAACkC,GAAT,CAAa,CAACC,OAAD,EAAUC,KAAV,KAAoB;AACjD,WACI;AAAK,MAAA,SAAS,EAAEC,YAAY,CAACV,KAAb,GAAsB,mBAAkBQ,OAAO,CAACR,KAAM,EAAtD,GAA0D,kBAA1E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAG,MAAA,SAAS,EAAC,oBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAmCQ,OAAO,CAACG,KAA3C,CADJ,EAEI;AAAG,MAAA,SAAS,EAAC,oBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAmCH,OAAO,CAACI,KAA3C,CAFJ,EAGI;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC,CAACJ,OAAO,CAACR,KAAT,GACD;AAAK,MAAA,OAAO,EAAE,MAAM;AAACxB,QAAAA,cAAc,CAAC,CAACD,WAAF,CAAd;AAA8BG,QAAAA,gBAAgB,CAAC8B,OAAO,CAAChB,EAAT,CAAhB;AAA6B,OAAhF;AAAkF,MAAA,GAAG,EAAEqB,OAAO,CAAC,wBAAD,CAA9F;AAA0H,MAAA,SAAS,EAAC,WAApI;AAAgJ,MAAA,GAAG,EAAC,cAApJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADC,GAGD;AAAK,MAAA,OAAO,EAAE,MAAM;AAACrC,QAAAA,cAAc,CAAC,CAACD,WAAF,CAAd;AAA8BG,QAAAA,gBAAgB,CAAC8B,OAAO,CAAChB,EAAT,CAAhB;AAA6B,OAAhF;AAAkF,MAAA,SAAS,EAAG,YAAWgB,OAAO,CAACR,KAAM,EAAvH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJA,EAKCzB,WAAW,IAAIE,aAAa,KAAK+B,OAAO,CAAChB,EAAzC,IACD;AAAK,MAAA,SAAS,EAAC,sBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,OAAO,EAAE,MAAM;AAACM,QAAAA,WAAW,CAACU,OAAO,CAAChB,EAAT,EAAa,OAAb,CAAX;AAAiC,OAAtD;AAAwD,MAAA,SAAS,EAAC,YAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAEI;AAAK,MAAA,OAAO,EAAE,MAAM;AAACM,QAAAA,WAAW,CAACU,OAAO,CAAChB,EAAT,EAAa,MAAb,CAAX;AAAgC,OAArD;AAAuD,MAAA,SAAS,EAAC,WAAjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,EAGI;AAAK,MAAA,OAAO,EAAE,MAAM;AAACM,QAAAA,WAAW,CAACU,OAAO,CAAChB,EAAT,EAAa,QAAb,CAAX;AAAkC,OAAvD;AAAyD,MAAA,SAAS,EAAC,aAAnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHJ,EAII;AAAK,MAAA,OAAO,EAAE,MAAM;AAACM,QAAAA,WAAW,CAACU,OAAO,CAAChB,EAAT,EAAa,KAAb,CAAX;AAA+B,OAApD;AAAsD,MAAA,SAAS,EAAC,UAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJJ,CANA,CAHJ,CADJ;AAmBH,GApBmB,CAjBxB,CAdJ,CADJ;AAwDH,CAnLD;;AAqLA,eAAe5C,QAAf","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport Navbar from '../navbar/Navbar'\nimport MenuBurger from '../menuBurger/MenuBurger'\nimport url from '../../api/url'\nimport './DataArea.scss'\n\n\nconst DataArea = () => {\n    const [mails, setMails] = useState()\n    const [userId, setUserId] = useState()\n    const [modelId, setModelId] = useState()\n    const [token, setToken] = useState()\n    const [choiceModel, setChoiceModel] = useState('Tout')\n    const [choiceCategory, setChoiceCategory] = useState('Tout')\n    const [models, setModels] = useState([])\n    const [selectModel, setSelectModel] = useState(false)\n    const [categorys, setCategorys] = useState([])\n    const [categorySelect, setCategorySelect] = useState()\n    const [selectCategory, setSelectCategory] = useState(false)\n    const [categoryId, setCategoryId] = useState()\n    const [contacts, setContacts] = useState([])\n    const [chooseColor, setChooseColor] = useState(false)\n    const [chooseColorId, setChooseColorId] = useState()\n\n    useEffect(() => {\n        if (localStorage.getItem('userId')) {\n            setUserId(localStorage.getItem('userId'))\n            setToken(localStorage.getItem('token'))\n        } else {\n            setUserId(sessionStorage.getItem('userId'))\n            setToken(sessionStorage.getItem('token'))\n        }\n    }, [])\n\n    useEffect(() => {\n        findAll()\n    }, [userId, token, modelId])\n\n    console.log(userId)\n\n    const findAll = () => {\n        fetch(`${url}/mail/findByUser/${userId}`, {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n                'Acces-Control-Allow-Origin': { origin },\n                'authorization': token\n            }\n        })\n            .then(res => res.json())\n            .then(res => console.log(res))\n    }\n\n    useEffect(() => {\n        fetch(`${url}/model/findAll/${userId}`, {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n                'Acces-Control-Allow-Origin': { origin },\n                'authorization': token\n            }\n        })\n            .then(res => res.json())\n            .then(res => setModels(res))\n    }, [userId, token])\n\n    useEffect(() => {\n        fetch(`${url}/category/findAll/${userId}/${modelId}`, {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n                'Acces-Control-Allow-Origin': { origin },\n                'authorization': token\n            }\n        })\n            .then(res => res.json())\n            .then(res => {\n                setCategorys(res)\n                if (!categorySelect && res[0]) setCategorySelect(res[0].id)\n            })\n    }, [userId, modelId])\n\n    useEffect(() => {\n        fetch(`${url}/mail/find/${userId}/${modelId}/${categoryId}`, {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n                'Acces-Control-Allow-Origin': { origin },\n                'authorization': token\n            }\n        })\n            .then(res => res.json())\n            .then(res => {\n                setContacts(res)\n            })\n    }, [categoryId, userId, modelId, chooseColorId, chooseColor])\n\n\n\n    const modelSelectFunction = (model) => {\n        console.log(model.id)\n        setSelectModel(false)\n        setChoiceModel(model.name)\n        setModelId(model.id)\n    }\n\n    const categorySelectFunction = (category) => {\n        setSelectCategory(false)\n        setChoiceCategory(category.name)\n        setCategoryId(category.id)\n    }\n\n    const changeColor = (mailId, color) => {\n        fetch(`${url}/mail/update/${userId}/${modelId}/${categoryId}/${mailId}`, {\n            method: 'PUT',\n            headers: {\n              'Content-Type': 'application/json',\n              'Access-Control-Allow-Origin': `${origin}`,\n              'authorization': token\n            },\n            body: JSON.stringify({\n                color : color\n            })\n        })\n        setChooseColor(false)\n    }\n\n\n    console.log(contacts)\n\n    return (\n        <div className=\"containerModelArea\">\n            {window.innerWidth > 1280 ?\n                <Navbar type={\"data\"} />\n                :\n                <MenuBurger type={\"models\"} />}\n            <div className=\"headSearchData\">\n                <div className=\"choiceSearchData\">\n                    <p onClick={() => { setSelectModel(!selectModel) }} className=\"textChoiceDataGet\">{choiceModel}</p>\n                </div>\n                {choiceModel !== 'Tout' &&\n                    <div className=\"choiceSearchData\">\n                        <p onClick={() => { setSelectCategory(!selectCategory) }} className=\"textChoiceDataGet\">{choiceCategory}</p>\n                    </div>}\n            </div>\n            <div className=\"contentDataArea\">\n                {selectModel &&\n                    <div className=\"listModelsData\">\n                        {models.length && models.map(model => {\n                            return (\n                                <p className=\"textChoiceData\" onClick={() => { modelSelectFunction(model) }}>{model.name}</p>\n                            )\n                        })}\n                    </div>}\n                {selectCategory &&\n                    <div className=\"listCategorysData\">\n                        {categorys.length && categorys.map(category => {\n                            return (\n                                <p className=\"textChoiceData\" onClick={() => { categorySelectFunction(category) }}>{category.name}</p>\n                            )\n                        })}\n                    </div>}\n                {contacts.length && contacts.map((contact, index) => {\n                    return(\n                        <div className={indexcontact.color ? `containerContact${contact.color}` : \"containerContact\"}>\n                            <p className=\"contentInfoContact\">{contact.phone}</p>\n                            <p className=\"contentInfoContact\">{contact.email}</p>\n                            <div className=\"containerColors\">\n                            {!contact.color ?\n                            <img onClick={() => {setChooseColor(!chooseColor); setChooseColorId(contact.id)}} src={require('./image/color_icon.png')} className=\"colorIcon\" alt=\"choose color\"/>\n                            :\n                            <div onClick={() => {setChooseColor(!chooseColor); setChooseColorId(contact.id)}} className={`colorIcon${contact.color}`}/>}\n                            {chooseColor && chooseColorId === contact.id &&\n                            <div className=\"containerChoiceColor\">\n                                <div onClick={() => {changeColor(contact.id, \"Green\")}} className=\"colorGreen\"/>\n                                <div onClick={() => {changeColor(contact.id, \"Blue\")}} className=\"colorBlue\"/>\n                                <div onClick={() => {changeColor(contact.id, \"Orange\")}} className=\"colorOrange\"/>\n                                <div onClick={() => {changeColor(contact.id, \"Red\")}} className=\"colorRed\"/>\n                            </div>}\n                            </div>\n                        </div>\n                    )\n                })}\n            </div>\n        </div>\n    )\n}\n\nexport default DataArea"]},"metadata":{},"sourceType":"module"}