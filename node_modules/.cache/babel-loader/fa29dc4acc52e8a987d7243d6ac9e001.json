{"ast":null,"code":"var _jsxFileName = \"/home/thomas/sortouch_front/src/components/chatbot_area/chatbotArea/ChatBotArea.js\";\nimport React, { useState, useEffect } from 'react';\nimport url from '../../../api/url';\nimport Questionchat from '../questionBlock/QuestionChat';\nimport FormContact from '../fromContact/FormContact';\nimport './ChatBotArea.scss';\n\nconst ChatBotArea = () => {\n  const [containers, setContainers] = useState([]);\n  const [cardsQuest, setCardsQuest] = useState([]);\n  const [cardsRes, setCardsRes] = useState([]);\n  const [cardsCategory, setCardsCategory] = useState([]);\n  const [responseSelect, setResponseSelect] = useState(0);\n  const [storageContainers, setStorageContainers] = useState();\n  const [responseSelected, setResponseSelected] = useState([]);\n  const [pair, setPair] = useState(false);\n  const [modelId, setModelId] = useState();\n  const [userId, setUserId] = useState();\n  const [cardsQuestFilter, setCardsQuestFilter] = useState([]);\n  useEffect(() => {\n    const stockUrl = String(window.location.href).split('');\n    let detect = 0;\n    let nb1 = 0;\n    let nb2 = 0;\n\n    for (let i = 0; i < stockUrl.length; i++) {\n      if (stockUrl[i] === 'w') {\n        detect = 1;\n      }\n\n      if (stockUrl[i + 1] === '&') {\n        detect = 2;\n      }\n\n      if (detect === 1) {\n        nb1 = nb1 + stockUrl[i + 1];\n      }\n\n      if (detect === 2) {\n        nb2 += stockUrl[i];\n      }\n    }\n\n    setUserId((parseInt(nb1.split('0')[1]) - 150) / 48 * 16);\n    setModelId((parseInt(nb2.split('&')[1]) - 150) / 8 * 4);\n  }, []);\n  useEffect(() => {\n    printContainers();\n  }, [userId, modelId, responseSelected]);\n\n  const printContainers = async () => {\n    try {\n      fetch(`${url}/container/findAll/${userId}/${responseSelect}/${modelId}`).then(res => res.json()).then(res => {\n        if (res.length) {\n          if (storageContainers) {\n            let resResult = res.filter(res => res.response_id != null);\n            let newContainer = [...storageContainers, ...resResult];\n            setContainers(newContainer);\n            takeCard(newContainer);\n          } else {\n            console.log(res);\n            setContainers(res);\n            takeCard(res);\n          }\n        }\n      });\n    } catch (error) {\n      console.log(error);\n    }\n\n    if (containers.length) {\n      setStorageContainers(containers);\n    }\n  };\n\n  const takeCard = async res => {\n    let stock = [];\n\n    for (let i = 0; i < res.length + 3; i++) {\n      if (res[i]) {\n        let resulted = await fetch(`${url}/relation/findCardQuestion/${res[i].id}/${userId}/${modelId}`, {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        const result = await resulted.json();\n        stock = [...stock, result];\n      }\n    }\n\n    if (stock.length) {\n      setCardsQuest(stock);\n      const stockFilter = await stock.filter(quest => quest[0]);\n      setCardsQuestFilter(stockFilter);\n    }\n\n    let stockRes = [];\n\n    for (let i = 0; i < res.length + 3; i++) {\n      if (res[i]) {\n        let resulted = await fetch(`${url}/relation/findCardResponse/${res[i].id}/${userId}/${modelId}`, {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        const result = await resulted.json();\n        stockRes = [...stockRes, result];\n      }\n    }\n\n    setCardsRes(stockRes);\n    let stockCategory = [];\n\n    for (let i = 0; i < res.length + 3; i++) {\n      if (typeof res[i] === 'object') {\n        let resulted = await fetch(`${url}/relation/findCardCategory/${res[i].id}/${userId}/${modelId}`, {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        const result = await resulted.json();\n        stockCategory = [...stockCategory, result];\n      }\n    }\n\n    setCardsCategory(stockCategory);\n  };\n\n  const selectResponse = async function (cardId, index) {\n    setPair(!pair);\n    const stockContainers = containers;\n    const numberCard = cardId;\n    const containerIndex = index + 1;\n    setResponseSelect(numberCard);\n    responseSelected.length = cardId;\n    stockContainers.length = containerIndex;\n    let stockResponseSelected = [...responseSelected, numberCard];\n\n    for (let a = 0; a < cardsRes.length; a++) {\n      if (cardsRes[a].length) {\n        for (let b = 0; b < cardsRes[a].length; b++) {\n          for (let c = 0; c < stockResponseSelected.length; c++) {\n            const nbRes = cardsRes[a].filter(card => stockResponseSelected.includes(card.id));\n\n            if (nbRes.length > 1) {\n              for (let i = 0; i < stockResponseSelected.length; i++) {\n                for (let a = 0; a < nbRes.length - 1; a++) {\n                  if (nbRes[a].id === stockResponseSelected[i]) {\n                    stockResponseSelected.splice(i, 1);\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    setResponseSelected(stockResponseSelected);\n    setStorageContainers(stockContainers);\n\n    if (stockContainers) {\n      printContainers();\n    }\n\n    setTimeout(() => {\n      window.scrollTo(0, document.body.scrollHeight);\n    }, 700);\n  };\n\n  return React.createElement(\"div\", {\n    className: \"containerAreaChatBot\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180\n    },\n    __self: this\n  }, Array.isArray(containers) && containers.map((container, index) => {\n    return React.createElement(\"div\", {\n      className: container.content_type === \"question\" && index % 3 !== 0 ? \"contentQuestionChat\" : container.content_type === \"question\" && index % 3 === 0 ? \"contentQuestionChatDecale\" : container.content_type === \"response\" ? \"contentResponseChat\" : \"contentDestinationChat\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }, Array.isArray(cardsQuest[index]) && container.content_type === \"question\" && cardsQuest[index].map(card => {\n      return cardsQuestFilter[cardsQuestFilter.length - 1] && card.id === cardsQuestFilter[cardsQuestFilter.length - 1][0].id ? React.createElement(Questionchat, {\n        text: card.content,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189\n        },\n        __self: this\n      }) : React.createElement(\"p\", {\n        className: \"textQuestChatbot\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191\n        },\n        __self: this\n      }, card.content);\n    }), Array.isArray(cardsRes[index]) && container.content_type === \"response\" && cardsRes[index].map(card => {\n      return React.createElement(\"div\", {\n        onClick: () => {\n          selectResponse(card.id, index);\n        },\n        className: responseSelected.includes(card.id) ? 'containerCardResChatActive' : 'containerCardResChat',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        id: `container${index}`,\n        className: \"textCardResChat\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198\n        },\n        __self: this\n      }, card.content));\n    }), Array.isArray(cardsCategory[index]) && container.content_type === \"category\" && cardsCategory[index].map(card => {\n      return React.createElement(FormContact, {\n        categoryId: card.id,\n        userId: userId,\n        modelId: modelId,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205\n        },\n        __self: this\n      });\n    }));\n  }));\n};\n\nexport default ChatBotArea;","map":{"version":3,"sources":["/home/thomas/sortouch_front/src/components/chatbot_area/chatbotArea/ChatBotArea.js"],"names":["React","useState","useEffect","url","Questionchat","FormContact","ChatBotArea","containers","setContainers","cardsQuest","setCardsQuest","cardsRes","setCardsRes","cardsCategory","setCardsCategory","responseSelect","setResponseSelect","storageContainers","setStorageContainers","responseSelected","setResponseSelected","pair","setPair","modelId","setModelId","userId","setUserId","cardsQuestFilter","setCardsQuestFilter","stockUrl","String","window","location","href","split","detect","nb1","nb2","i","length","parseInt","printContainers","fetch","then","res","json","resResult","filter","response_id","newContainer","takeCard","console","log","error","stock","resulted","id","method","headers","result","stockFilter","quest","stockRes","stockCategory","selectResponse","cardId","index","stockContainers","numberCard","containerIndex","stockResponseSelected","a","b","c","nbRes","card","includes","splice","setTimeout","scrollTo","document","body","scrollHeight","Array","isArray","map","container","content_type","content"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react'\nimport url from '../../../api/url';\nimport Questionchat from '../questionBlock/QuestionChat';\nimport FormContact from '../fromContact/FormContact';\nimport './ChatBotArea.scss'\n\nconst ChatBotArea = () => {\n    \n    const [containers, setContainers] = useState([])\n    const [cardsQuest, setCardsQuest] = useState([])\n    const [cardsRes, setCardsRes] = useState([])\n    const [cardsCategory, setCardsCategory] = useState([])\n    const [responseSelect, setResponseSelect] = useState(0)\n    const [storageContainers, setStorageContainers] = useState()\n    const [responseSelected, setResponseSelected] = useState([])\n    const [pair, setPair] = useState(false)\n    const [modelId, setModelId] = useState()\n    const [userId, setUserId] = useState()\n    const [cardsQuestFilter, setCardsQuestFilter] = useState([])\n\n    useEffect(() => {\n        const stockUrl = String(window.location.href).split('')\n        let detect = 0\n        let nb1 = 0\n        let nb2 = 0\n        for(let i = 0; i < stockUrl.length; i++){\n            if(stockUrl[i] === 'w'){\n                detect = 1\n            }\n            if(stockUrl[i + 1] === '&'){\n                detect = 2\n            }\n            if(detect === 1){\n                nb1 = nb1 + stockUrl[i + 1]\n            }\n            if(detect === 2){\n                nb2 += stockUrl[i]\n            }\n        }\n        setUserId((parseInt(nb1.split('0')[1]) - 150)/48*16)\n        setModelId((parseInt(nb2.split('&')[1]) - 150)/8*4)\n    }, [])\n\n    useEffect(() => {\n        printContainers()\n    },[userId, modelId, responseSelected])\n\n    const printContainers = async () => {\n        try{\n            fetch(`${url}/container/findAll/${userId}/${responseSelect}/${modelId}`)\n            .then(res => res.json())\n            .then(res => {\n                if(res.length){\n                    if(storageContainers){\n                        let resResult = res.filter(res => res.response_id != null)\n                        let newContainer = [...storageContainers, ...resResult]\n                        setContainers(newContainer)\n                        takeCard(newContainer)\n                    } else {\n                        console.log(res)\n                        setContainers(res)\n                        takeCard(res)\n                    }\n                }\n            })\n            \n            \n        } catch(error) {\n            console.log(error)\n        }\n        if(containers.length){\n            setStorageContainers(containers)\n\n        }\n    }\n\n    const takeCard = async (res) => {\n        let stock = []\n        for(let i = 0; i < res.length + 3; i++){\n            if(res[i]){\n                let resulted = await fetch(`${url}/relation/findCardQuestion/${res[i].id}/${userId}/${modelId}`, {\n                    method: 'GET',\n                    headers: {\n                    'Content-Type' :'application/json'\n                    }\n                })\n                const result = await resulted.json()\n                stock = [...stock, result]\n            }\n        }\n        if(stock.length){\n\n        setCardsQuest(stock)\n        const stockFilter = await stock.filter(quest => quest[0])\n        setCardsQuestFilter(stockFilter)\n\n        }\n\n\n        let stockRes = []\n        for(let i = 0; i < res.length + 3; i++){\n            if(res[i]){\n                let resulted = await fetch(`${url}/relation/findCardResponse/${res[i].id}/${userId}/${modelId}`, {\n                    method: 'GET',\n                    headers: {\n                    'Content-Type' :'application/json'\n                    }\n                })\n                const result = await resulted.json()\n                stockRes = [...stockRes, result]\n            }\n        }\n        setCardsRes(stockRes)\n        let stockCategory = []\n        for(let i = 0; i < res.length + 3; i++){\n            if(typeof res[i] === 'object'){\n                let resulted = await fetch(`${url}/relation/findCardCategory/${res[i].id}/${userId}/${modelId}`, {\n                    method: 'GET',\n                    headers: {\n                    'Content-Type' :'application/json'\n                    }\n                })\n                const result = await resulted.json()\n                stockCategory = [...stockCategory, result]\n            }\n        }\n        setCardsCategory(stockCategory)\n    }\n\n    const selectResponse = async function (cardId, index) {\n        setPair(!pair)\n        const stockContainers = containers\n        const numberCard = cardId\n        const containerIndex = index + 1\n        setResponseSelect(numberCard)\n\n        \n\n        responseSelected.length = cardId\n        stockContainers.length = containerIndex\n\n        \n        let stockResponseSelected = ([...responseSelected, numberCard])\n\n            for(let a = 0; a < cardsRes.length; a++){\n                if(cardsRes[a].length){\n                    for(let b = 0; b < cardsRes[a].length; b++){\n                            for(let c = 0; c < stockResponseSelected.length; c++){\n                                const nbRes = cardsRes[a].filter(card => stockResponseSelected.includes(card.id))\n                                if(nbRes.length > 1){\n                                    for(let i = 0; i < stockResponseSelected.length; i++){\n                                        for(let a = 0; a < nbRes.length - 1; a++){\n                                            if(nbRes[a].id === (stockResponseSelected[i])){\n                                                stockResponseSelected.splice(i, 1)\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n        setResponseSelected(stockResponseSelected)\n\n        setStorageContainers(stockContainers)\n\n        if(stockContainers){\n            printContainers()\n        }\n\n        setTimeout(() => {\n            window.scrollTo(0,document.body.scrollHeight);\n        }, 700)\n    }\n    \n\n    \n\n    return(\n        <div className=\"containerAreaChatBot\">\n            {Array.isArray(containers) &&\n            containers.map((container, index) => {\n                return(\n                    <div className={container.content_type === \"question\" && index%3 !== 0 ? \"contentQuestionChat\" : container.content_type === \"question\" && index%3 === 0 ? \"contentQuestionChatDecale\" : container.content_type === \"response\" ? \"contentResponseChat\" : \"contentDestinationChat\"}>\n                            {Array.isArray(cardsQuest[index]) && container.content_type === \"question\" &&\n                                cardsQuest[index].map(card => {\n                                    return(\n                                        cardsQuestFilter[cardsQuestFilter.length - 1] && card.id === cardsQuestFilter[cardsQuestFilter.length - 1][0].id ?\n                                        <Questionchat text={card.content}/>\n                                        :\n                                        <p className=\"textQuestChatbot\">{card.content}</p>\n                                    )\n                                })}\n                            {Array.isArray(cardsRes[index]) && container.content_type === \"response\" &&\n                                cardsRes[index].map(card => {\n                                    return(\n                                        <div onClick={() => {selectResponse(card.id, index)}}   className={responseSelected.includes(card.id) ? 'containerCardResChatActive' : 'containerCardResChat'}>\n                                            <p id={`container${index}`} className=\"textCardResChat\">{card.content}</p>\n                                        </div>)\n                                        })\n                                    }\n                            {Array.isArray(cardsCategory[index]) && container.content_type === \"category\" &&\n                                cardsCategory[index].map(card => {\n                                    return(\n                                        <FormContact categoryId={card.id} userId={userId} modelId={modelId} />\n                                    )\n                                })}\n                    </div>\n                )\n            })}\n        </div>\n    )\n}\n\nexport default ChatBotArea"]},"metadata":{},"sourceType":"module"}