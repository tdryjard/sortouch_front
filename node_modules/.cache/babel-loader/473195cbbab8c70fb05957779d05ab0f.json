{"ast":null,"code":"var _jsxFileName = \"/home/thomas/navebe/front/src/components/data_area/DataArea.js\";\nimport React, { useEffect, useState } from 'react';\nimport Navbar from '../navbar/Navbar';\nimport MenuBurger from '../menuBurger/MenuBurger';\nimport url from '../../api/url';\nimport './DataArea.scss';\n\nconst DataArea = () => {\n  const [mails, setMails] = useState();\n  const [userId, setUserId] = useState();\n  const [modelId, setModelId] = useState();\n  const [token, setToken] = useState();\n  const [choiceModel, setChoiceModel] = useState('Tout');\n  const [choiceCategory, setChoiceCategory] = useState('Tout');\n  const [models, setModels] = useState([]);\n  const [selectModel, setSelectModel] = useState(false);\n  const [categorys, setCategorys] = useState([]);\n  const [categorySelect, setCategorySelect] = useState();\n  const [selectCategory, setSelectCategory] = useState(false);\n  const [categoryId, setCategoryId] = useState();\n  const [contacts, setContacts] = useState([]);\n  const [sortContacts, setSortContacts] = useState([]);\n  const [chooseColor, setChooseColor] = useState(false);\n  const [chooseColorId, setChooseColorId] = useState();\n  const [colorSort, setColorSort] = useState('');\n  const [colorParamsSelect, setColorParamsSelect] = useState(false);\n  useEffect(() => {\n    if (localStorage.getItem('userId')) {\n      setUserId(localStorage.getItem('userId'));\n      setToken(localStorage.getItem('token'));\n    } else {\n      setUserId(sessionStorage.getItem('userId'));\n      setToken(sessionStorage.getItem('token'));\n    }\n  }, []);\n  useEffect(() => {\n    fetch(`${url}/model/findAll/${userId}`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Acces-Control-Allow-Origin': {\n          origin\n        },\n        'authorization': token\n      }\n    }).then(res => res.json()).then(res => setModels(res));\n  }, [userId, token]);\n  useEffect(() => {\n    fetch(`${url}/category/findAll/${userId}/${modelId}`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Acces-Control-Allow-Origin': {\n          origin\n        },\n        'authorization': token\n      }\n    }).then(res => res.json()).then(res => {\n      setCategorys(res);\n      if (!categorySelect && res[0]) setCategorySelect(res[0].id);\n    });\n  }, [userId, modelId]);\n  useEffect(() => {\n    fetch(`${url}/mail/findByUser/${userId}`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Acces-Control-Allow-Origin': {\n          origin\n        },\n        'authorization': token\n      }\n    }).then(res => res.json()).then(res => {\n      console.log(res);\n      setContacts(res);\n      if (!sortContacts.length) setSortContacts(res);\n    });\n  }, [userId, modelId, categoryId, socolorSort]);\n\n  const sort = (param, type) => {\n    let stockContacts = [];\n    let stockageContact = contacts;\n\n    if (modelId && type !== \"model\") {\n      let sortModel = stockageContact.filter(contact => contact.model_id !== modelId);\n      stockContacts = [...stockContacts, ...sortModel];\n    } else if (type === \"model\") {\n      setModelId(param.id);\n      setSelectModel(false);\n      setChoiceModel(param.name);\n      let sortModel = stockageContact.filter(contact => contact.model_id !== param.id);\n      console.log(param);\n      console.log(sortModel);\n      stockContacts = [...stockContacts, ...sortModel];\n    }\n\n    if (categoryId && type !== \"category\") {\n      let sortCategory = stockageContact.filter(contact => contact.category_id !== categoryId);\n      stockContacts = [...stockContacts, ...sortCategory];\n    } else if (type === \"category\") {\n      setSelectCategory(false);\n      setChoiceCategory(param.name);\n      setCategoryId(param.id);\n      let sortCategory = stockageContact.filter(contact => contact.category_id !== param.id);\n      stockContacts = [...stockContacts, ...sortCategory];\n    }\n\n    if (colorSort && type !== \"color\") {\n      let sortColor = stockageContact.filter(contact => contact.color !== colorSort);\n      stockContacts = [...stockContacts, ...sortColor];\n    } else if (type === \"color\") {\n      setColorSort(param);\n      setColorParamsSelect(false);\n      let sortColor = stockageContact.filter(contact => contact.color !== param);\n      stockContacts = [...stockContacts, ...sortColor];\n    }\n\n    console.log(stockContacts);\n    let newContacts = contacts;\n    console.log(newContacts);\n\n    for (let i = 0; i < contacts.length; i++) {\n      for (let a = 0; a < stockContacts.length; a++) {\n        if (contacts[i].id === stockContacts[a].id) {\n          console.log(newContacts[a]);\n          newContacts.splice(i, 1);\n        }\n      }\n    }\n\n    console.log(newContacts);\n    setSortContacts(newContacts);\n  };\n\n  const changeColor = (mailId, color) => {\n    fetch(`${url}/mail/updateSimple/${mailId}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': `${origin}`,\n        'authorization': token\n      },\n      body: JSON.stringify({\n        color: color\n      })\n    });\n    setChooseColor(false);\n  };\n\n  console.log(sortContacts);\n  console.log(contacts);\n  return React.createElement(\"div\", {\n    className: \"containerModelArea\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156\n    },\n    __self: this\n  }, window.innerWidth > 1280 ? React.createElement(Navbar, {\n    type: \"data\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158\n    },\n    __self: this\n  }) : React.createElement(MenuBurger, {\n    type: \"models\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"headSearchData\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"choiceSearchData\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    onClick: () => {\n      setSelectModel(!selectModel);\n    },\n    className: \"textChoiceDataGet\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163\n    },\n    __self: this\n  }, choiceModel)), choiceModel !== 'Tout' && React.createElement(\"div\", {\n    className: \"choiceSearchData\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    onClick: () => {\n      setSelectCategory(!selectCategory);\n    },\n    className: \"textChoiceDataGet\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167\n    },\n    __self: this\n  }, choiceCategory)), React.createElement(\"div\", {\n    className: \"containerColorParams\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169\n    },\n    __self: this\n  }, !colorSort ? React.createElement(\"img\", {\n    onClick: () => {\n      setColorParamsSelect(!colorParamsSelect);\n    },\n    src: require('./image/color_icon.png'),\n    className: \"colorIcon\",\n    alt: \"choose color\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171\n    },\n    __self: this\n  }) : React.createElement(\"div\", {\n    onClick: () => {\n      setColorParamsSelect(!colorParamsSelect);\n    },\n    className: `colorIcon${colorSort}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173\n    },\n    __self: this\n  }), colorParamsSelect && React.createElement(\"div\", {\n    className: \"containerChoiceColor\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    onClick: () => {\n      sort('Green', 'color');\n    },\n    className: \"colorGreen\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    onClick: () => {\n      sort('Blue', 'color');\n    },\n    className: \"colorBlue\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    onClick: () => {\n      sort('Orange', 'color');\n    },\n    className: \"colorOrange\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    onClick: () => {\n      sort('Red', 'color');\n    },\n    className: \"colorRed\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    onClick: () => {\n      sort('', 'color');\n    },\n    className: \"colorWhite\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180\n    },\n    __self: this\n  })))), React.createElement(\"div\", {\n    className: \"contentDataArea\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184\n    },\n    __self: this\n  }, selectModel && React.createElement(\"div\", {\n    className: \"listModelsData\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186\n    },\n    __self: this\n  }, models.length && models.map(model => {\n    return React.createElement(\"p\", {\n      className: \"textChoiceData\",\n      onClick: () => {\n        sort(model, 'model');\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }, model.name);\n  })), selectCategory && React.createElement(\"div\", {\n    className: \"listCategorysData\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194\n    },\n    __self: this\n  }, categorys.length && categorys.map(category => {\n    return React.createElement(\"p\", {\n      className: \"textChoiceData\",\n      onClick: () => {\n        sort(category, 'category');\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    }, category.name);\n  })), sortContacts.length && sortContacts.map((contact, index) => {\n    return React.createElement(\"div\", {\n      className: contact.color ? `containerContact${contact.color}` : \"containerContact\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: \"contentInfoContact\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    }, contact.phone), React.createElement(\"p\", {\n      className: \"contentInfoContact\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }, contact.email), React.createElement(\"div\", {\n      className: \"containerColors\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }, !contact.color ? React.createElement(\"img\", {\n      onClick: () => {\n        setChooseColor(!chooseColor);\n        setChooseColorId(contact.id);\n      },\n      src: require('./image/color_icon.png'),\n      className: \"colorIcon\",\n      alt: \"choose color\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }) : React.createElement(\"div\", {\n      onClick: () => {\n        setChooseColor(!chooseColor);\n        setChooseColorId(contact.id);\n      },\n      className: `colorIcon${contact.color}`,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    }), chooseColor && chooseColorId === contact.id && React.createElement(\"div\", {\n      className: \"containerChoiceColor\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      onClick: () => {\n        changeColor(contact.id, \"Green\");\n      },\n      className: \"colorGreen\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      onClick: () => {\n        changeColor(contact.id, \"Blue\");\n      },\n      className: \"colorBlue\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      onClick: () => {\n        changeColor(contact.id, \"Orange\");\n      },\n      className: \"colorOrange\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      onClick: () => {\n        changeColor(contact.id, \"Red\");\n      },\n      className: \"colorRed\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      onClick: () => {\n        changeColor(contact.id, \"\");\n      },\n      className: \"colorWhite\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    }))));\n  })));\n};\n\nexport default DataArea;","map":{"version":3,"sources":["/home/thomas/navebe/front/src/components/data_area/DataArea.js"],"names":["React","useEffect","useState","Navbar","MenuBurger","url","DataArea","mails","setMails","userId","setUserId","modelId","setModelId","token","setToken","choiceModel","setChoiceModel","choiceCategory","setChoiceCategory","models","setModels","selectModel","setSelectModel","categorys","setCategorys","categorySelect","setCategorySelect","selectCategory","setSelectCategory","categoryId","setCategoryId","contacts","setContacts","sortContacts","setSortContacts","chooseColor","setChooseColor","chooseColorId","setChooseColorId","colorSort","setColorSort","colorParamsSelect","setColorParamsSelect","localStorage","getItem","sessionStorage","fetch","method","headers","origin","then","res","json","id","console","log","length","socolorSort","sort","param","type","stockContacts","stockageContact","sortModel","filter","contact","model_id","name","sortCategory","category_id","sortColor","color","newContacts","i","a","splice","changeColor","mailId","body","JSON","stringify","window","innerWidth","require","map","model","category","index","phone","email"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport Navbar from '../navbar/Navbar'\nimport MenuBurger from '../menuBurger/MenuBurger'\nimport url from '../../api/url'\nimport './DataArea.scss'\n\n\nconst DataArea = () => {\n    const [mails, setMails] = useState()\n    const [userId, setUserId] = useState()\n    const [modelId, setModelId] = useState()\n    const [token, setToken] = useState()\n    const [choiceModel, setChoiceModel] = useState('Tout')\n    const [choiceCategory, setChoiceCategory] = useState('Tout')\n    const [models, setModels] = useState([])\n    const [selectModel, setSelectModel] = useState(false)\n    const [categorys, setCategorys] = useState([])\n    const [categorySelect, setCategorySelect] = useState()\n    const [selectCategory, setSelectCategory] = useState(false)\n    const [categoryId, setCategoryId] = useState()\n    const [contacts, setContacts] = useState([])\n    const [sortContacts, setSortContacts] = useState([])\n    const [chooseColor, setChooseColor] = useState(false)\n    const [chooseColorId, setChooseColorId] = useState()\n    const [colorSort, setColorSort] = useState('')\n    const [colorParamsSelect, setColorParamsSelect] = useState(false)\n\n    useEffect(() => {\n        if (localStorage.getItem('userId')) {\n            setUserId(localStorage.getItem('userId'))\n            setToken(localStorage.getItem('token'))\n        } else {\n            setUserId(sessionStorage.getItem('userId'))\n            setToken(sessionStorage.getItem('token'))\n        }\n    }, [])\n\n    useEffect(() => {\n        fetch(`${url}/model/findAll/${userId}`, {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n                'Acces-Control-Allow-Origin': { origin },\n                'authorization': token\n            }\n        })\n            .then(res => res.json())\n            .then(res => setModels(res))\n    }, [userId, token])\n\n    useEffect(() => {\n        fetch(`${url}/category/findAll/${userId}/${modelId}`, {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n                'Acces-Control-Allow-Origin': { origin },\n                'authorization': token\n            }\n        })\n            .then(res => res.json())\n            .then(res => {\n                setCategorys(res)\n                if (!categorySelect && res[0]) setCategorySelect(res[0].id)\n            })\n    }, [userId, modelId])\n\n    useEffect(() => {\n        fetch(`${url}/mail/findByUser/${userId}`, {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n                'Acces-Control-Allow-Origin': { origin },\n                'authorization': token\n            }\n        })\n            .then(res => res.json())\n            .then(res => {\n                console.log(res)\n                setContacts(res)\n                if (!sortContacts.length) setSortContacts(res)\n            })\n    }, [userId, modelId, categoryId, socolorSort])\n\n\n    const sort = (param, type) => {\n        let stockContacts = []\n        let stockageContact = contacts\n\n        if (modelId && type !== \"model\") {\n            let sortModel = stockageContact.filter(contact => contact.model_id !== modelId)\n            stockContacts = [...stockContacts, ...sortModel]\n        } else if (type === \"model\") {\n            setModelId(param.id)\n            setSelectModel(false)\n            setChoiceModel(param.name)\n            let sortModel = stockageContact.filter(contact => contact.model_id !== param.id)\n            console.log(param)\n            console.log(sortModel)\n            stockContacts = [...stockContacts, ...sortModel]\n        }\n\n        if (categoryId && type !== \"category\") {\n            let sortCategory = stockageContact.filter(contact => contact.category_id !== categoryId)\n            stockContacts = [...stockContacts, ...sortCategory]\n        } else if (type === \"category\") {\n            setSelectCategory(false)\n            setChoiceCategory(param.name)\n            setCategoryId(param.id)\n            let sortCategory = stockageContact.filter(contact => contact.category_id !== param.id)\n            stockContacts = [...stockContacts, ...sortCategory]\n        }\n\n        if (colorSort && type !== \"color\") {\n            let sortColor = stockageContact.filter(contact => contact.color !== colorSort)\n            stockContacts = [...stockContacts, ...sortColor]\n        } else if (type === \"color\") {\n            setColorSort(param)\n            setColorParamsSelect(false)\n            let sortColor = stockageContact.filter(contact => contact.color !== param)\n            stockContacts = [...stockContacts, ...sortColor]\n        }\n        console.log(stockContacts)\n        let newContacts = contacts\n        console.log(newContacts)\n        for (let i = 0; i < contacts.length; i++) {\n            for (let a = 0; a < stockContacts.length; a++) {\n                if (contacts[i].id === stockContacts[a].id) {\n                    console.log(newContacts[a])\n                    newContacts.splice(i, 1)\n                }\n            }\n        }\n        console.log(newContacts)\n        setSortContacts(newContacts)\n    }\n\n    const changeColor = (mailId, color) => {\n        fetch(`${url}/mail/updateSimple/${mailId}`, {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json',\n                'Access-Control-Allow-Origin': `${origin}`,\n                'authorization': token\n            },\n            body: JSON.stringify({\n                color: color\n            })\n        })\n        setChooseColor(false)\n    }\n\n    console.log(sortContacts)\n    console.log(contacts)\n\n    return (\n        <div className=\"containerModelArea\">\n            {window.innerWidth > 1280 ?\n                <Navbar type={\"data\"} />\n                :\n                <MenuBurger type={\"models\"} />}\n            <div className=\"headSearchData\">\n                <div className=\"choiceSearchData\">\n                    <p onClick={() => { setSelectModel(!selectModel) }} className=\"textChoiceDataGet\">{choiceModel}</p>\n                </div>\n                {choiceModel !== 'Tout' &&\n                    <div className=\"choiceSearchData\">\n                        <p onClick={() => { setSelectCategory(!selectCategory) }} className=\"textChoiceDataGet\">{choiceCategory}</p>\n                    </div>}\n                <div className=\"containerColorParams\">\n                    {!colorSort ?\n                        <img onClick={() => { setColorParamsSelect(!colorParamsSelect) }} src={require('./image/color_icon.png')} className=\"colorIcon\" alt=\"choose color\" />\n                        :\n                        <div onClick={() => { setColorParamsSelect(!colorParamsSelect) }} className={`colorIcon${colorSort}`} />}\n                    {colorParamsSelect &&\n                        <div className=\"containerChoiceColor\">\n                            <div onClick={() => { sort('Green', 'color') }} className=\"colorGreen\" />\n                            <div onClick={() => { sort('Blue', 'color') }} className=\"colorBlue\" />\n                            <div onClick={() => { sort('Orange', 'color') }} className=\"colorOrange\" />\n                            <div onClick={() => { sort('Red', 'color') }} className=\"colorRed\" />\n                            <div onClick={() => { sort('', 'color') }} className=\"colorWhite\" />\n                        </div>}\n                </div>\n            </div>\n            <div className=\"contentDataArea\">\n                {selectModel &&\n                    <div className=\"listModelsData\">\n                        {models.length && models.map(model => {\n                            return (\n                                <p className=\"textChoiceData\" onClick={() => { sort(model, 'model') }}>{model.name}</p>\n                            )\n                        })}\n                    </div>}\n                {selectCategory &&\n                    <div className=\"listCategorysData\">\n                        {categorys.length && categorys.map(category => {\n                            return (\n                                <p className=\"textChoiceData\" onClick={() => { sort(category, 'category') }}>{category.name}</p>\n                            )\n                        })}\n                    </div>}\n                {sortContacts.length && sortContacts.map((contact, index) => {\n                    return (\n                        <div className={contact.color ? `containerContact${contact.color}` : \"containerContact\"}>\n                            <p className=\"contentInfoContact\">{contact.phone}</p>\n                            <p className=\"contentInfoContact\">{contact.email}</p>\n                            <div className=\"containerColors\">\n                                {!contact.color ?\n                                    <img onClick={() => { setChooseColor(!chooseColor); setChooseColorId(contact.id) }} src={require('./image/color_icon.png')} className=\"colorIcon\" alt=\"choose color\" />\n                                    :\n                                    <div onClick={() => { setChooseColor(!chooseColor); setChooseColorId(contact.id) }} className={`colorIcon${contact.color}`} />}\n                                {chooseColor && chooseColorId === contact.id &&\n                                    <div className=\"containerChoiceColor\">\n                                        <div onClick={() => { changeColor(contact.id, \"Green\") }} className=\"colorGreen\" />\n                                        <div onClick={() => { changeColor(contact.id, \"Blue\") }} className=\"colorBlue\" />\n                                        <div onClick={() => { changeColor(contact.id, \"Orange\") }} className=\"colorOrange\" />\n                                        <div onClick={() => { changeColor(contact.id, \"Red\") }} className=\"colorRed\" />\n                                        <div onClick={() => { changeColor(contact.id, \"\") }} className=\"colorWhite\" />\n                                    </div>}\n                            </div>\n                        </div>\n                    )\n                })}\n            </div>\n        </div>\n    )\n}\n\nexport default DataArea"]},"metadata":{},"sourceType":"module"}