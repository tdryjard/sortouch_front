{"ast":null,"code":"var _jsxFileName = \"/home/thomas/navebe/front/src/components/react_library/chatbotArea/ChatBotArea.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport Questionchat from '../questionBlock/QuestionChat';\nimport FormContact from '../fromContact/FormContact';\nimport cross from './image/cross.png';\nimport logo from './image/logo.png';\nimport './ChatBotArea.css';\n\nconst ChatBotArea = ({\n  modelId,\n  userId\n}) => {\n  const [containers, setContainers] = useState([]);\n  const [cardsQuest, setCardsQuest] = useState([]);\n  const [cardsRes, setCardsRes] = useState([]);\n  const [cardsCategory, setCardsCategory] = useState([]);\n  const [responseSelect, setResponseSelect] = useState(0);\n  const [storageContainers, setStorageContainers] = useState();\n  const [responseSelected, setResponseSelected] = useState([]);\n  const [pair, setPair] = useState(false);\n  const [cardsQuestFilter, setCardsQuestFilter] = useState([]);\n  const [chatActive, setChatActive] = useState(false);\n  const [textIcon, setTextIcon] = useState(true);\n  useEffect(() => {\n    printContainers();\n  }, [userId, responseSelected]);\n  useEffect(() => {\n    setTimeout(() => {\n      setTextIcon(false);\n    }, 7000);\n  });\n\n  const printContainers = async () => {\n    try {\n      fetch(`http://192.168.43.193:8000/api/container/findAll/${userId}/${responseSelect}/${modelId}`).then(res => res.json()).then(res => {\n        if (res.length) {\n          if (storageContainers) {\n            let resResult = res.filter(res => res.response_id != null);\n            let newContainer = [...storageContainers, ...resResult];\n            setContainers(newContainer);\n            takeCard(newContainer);\n          } else {\n            setContainers(res);\n            takeCard(res);\n          }\n        }\n      });\n    } catch (error) {\n      console.log(error);\n    }\n\n    setStorageContainers(containers);\n  };\n\n  const takeCard = async res => {\n    let stock = [];\n\n    for (let i = 0; i < res.length + 3; i++) {\n      if (res[i]) {\n        let resulted = await fetch(`http://192.168.43.193:8000/api/relation/findCardQuestion/${res[i].id}/${userId}/${modelId}`, {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        const result = await resulted.json();\n        stock = [...stock, result];\n      }\n    }\n\n    if (stock.length) {\n      setCardsQuest(stock);\n      const stockFilter = await stock.filter(quest => quest[0]);\n      setCardsQuestFilter(stockFilter);\n    }\n\n    let stockRes = [];\n\n    for (let i = 0; i < res.length + 3; i++) {\n      if (res[i]) {\n        let resulted = await fetch(`http://192.168.43.193:8000/api/relation/findCardResponse/${res[i].id}/${userId}/${modelId}`, {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        const result = await resulted.json();\n        stockRes = [...stockRes, result];\n      }\n    }\n\n    setCardsRes(stockRes);\n    let stockCategory = [];\n\n    for (let i = 0; i < res.length + 3; i++) {\n      if (typeof res[i] === 'object') {\n        let resulted = await fetch(`http://192.168.43.193:8000/api/relation/findCardCategory/${res[i].id}/${userId}/${modelId}`, {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        const result = await resulted.json();\n        stockCategory = [...stockCategory, result];\n      }\n    }\n\n    setCardsCategory(stockCategory);\n  };\n\n  const selectResponse = async function (cardId, index) {\n    setPair(!pair);\n    const stockContainers = containers;\n    const numberCard = cardId;\n    const containerIndex = index + 1;\n    setResponseSelect(numberCard);\n    responseSelected.length = cardId;\n    stockContainers.length = containerIndex;\n    let stockResponseSelected = [...responseSelected, numberCard];\n\n    for (let a = 0; a < cardsRes.length; a++) {\n      if (cardsRes[a].length) {\n        for (let b = 0; b < cardsRes[a].length; b++) {\n          for (let c = 0; c < stockResponseSelected.length; c++) {\n            const nbRes = cardsRes[a].filter(card => stockResponseSelected.includes(card.id));\n\n            if (nbRes.length > 1) {\n              for (let i = 0; i < stockResponseSelected.length; i++) {\n                for (let a = 0; a < nbRes.length - 1; a++) {\n                  if (nbRes[a].id === stockResponseSelected[i]) {\n                    stockResponseSelected.splice(i, 1);\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    setResponseSelected(stockResponseSelected);\n    setStorageContainers(stockContainers);\n\n    if (stockContainers) {\n      printContainers();\n    }\n\n    setTimeout(() => {\n      window.scrollTo(0, document.body.scrollHeight);\n    }, 700);\n  };\n\n  const activeChat = () => {\n    setChatActive(true);\n  };\n\n  return React.createElement(\"div\", {\n    className: !chatActive ? \"containerIconChat\" : \"containerChatbot\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164\n    },\n    __self: this\n  }, chatActive && React.createElement(\"div\", {\n    className: \"headChatbot\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    onClick: () => {\n      setChatActive(!chatActive);\n    },\n    alt: \"close sortouch\",\n    src: cross,\n    className: \"crossChatbot\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167\n    },\n    __self: this\n  }), React.createElement(\"a\", {\n    target: \"__blank\",\n    href: \"https://sortouch.com\",\n    className: \"sortouch\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168\n    },\n    __self: this\n  }, \"Sortouch\")), React.createElement(\"div\", {\n    className: chatActive ? \"contentChatbot\" : \"contentIcon\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170\n    },\n    __self: this\n  }, !chatActive ? React.createElement(\"div\", {\n    className: \"contentTe\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172\n    },\n    __self: this\n  }, textIcon && React.createElement(\"div\", {\n    className: \"contentTextIconChat\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    onClick: activeChat,\n    className: \"textIconCard\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175\n    },\n    __self: this\n  }, React.createElement(Questionchat, {\n    text: \"Prenez contact avec moi !\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175\n    },\n    __self: this\n  }))), React.createElement(\"img\", {\n    alt: \"icon chat\",\n    onClick: activeChat,\n    src: logo,\n    className: \"iconChat\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177\n    },\n    __self: this\n  })) : Array.isArray(containers) && containers.map((container, index) => {\n    return React.createElement(\"div\", {\n      className: container.content_type === \"question\" && index % 3 !== 0 ? \"contentQuestionChat\" : container.content_type === \"question\" && index % 3 === 0 ? \"contentQuestionChatDecale\" : container.content_type === \"response\" ? \"contentResponseChat\" : \"contentDestinationChat\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }, Array.isArray(cardsQuest[index]) && container.content_type === \"question\" && cardsQuest[index].map(card => {\n      return cardsQuestFilter[cardsQuestFilter.length - 1] && card.id === cardsQuestFilter[cardsQuestFilter.length - 1][0].id ? React.createElement(\"div\", {\n        className: \"contentQuestChat\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188\n        },\n        __self: this\n      }, React.createElement(Questionchat, {\n        text: card.content,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189\n        },\n        __self: this\n      }), React.createElement(\"img\", {\n        alt: \"sortouch\",\n        src: logo,\n        className: \"logoChat\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190\n        },\n        __self: this\n      })) : React.createElement(\"div\", {\n        className: \"contentQuestChat\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        className: \"textQuest\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194\n        },\n        __self: this\n      }, card.content), React.createElement(\"img\", {\n        alt: \"sortouch\",\n        src: logo,\n        className: \"logoChat\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195\n        },\n        __self: this\n      }));\n    }), Array.isArray(cardsRes[index]) && container.content_type === \"response\" && cardsRes[index].map(card => {\n      return React.createElement(\"div\", {\n        onClick: () => {\n          selectResponse(card.id, index);\n        },\n        className: responseSelected.includes(card.id) ? 'containerCardResChatActive' : 'containerCardResChat',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        id: `container${index}`,\n        className: \"textCardResChat\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203\n        },\n        __self: this\n      }, card.content));\n    }), Array.isArray(cardsCategory[index]) && container.content_type === \"category\" && cardsCategory[index].map(card => {\n      return React.createElement(FormContact, {\n        categoryId: card.id,\n        userId: userId,\n        modelId: modelId,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210\n        },\n        __self: this\n      });\n    }));\n  })));\n};\n\nexport default ChatBotArea;","map":{"version":3,"sources":["/home/thomas/navebe/front/src/components/react_library/chatbotArea/ChatBotArea.jsx"],"names":["React","useState","useEffect","Questionchat","FormContact","cross","logo","ChatBotArea","modelId","userId","containers","setContainers","cardsQuest","setCardsQuest","cardsRes","setCardsRes","cardsCategory","setCardsCategory","responseSelect","setResponseSelect","storageContainers","setStorageContainers","responseSelected","setResponseSelected","pair","setPair","cardsQuestFilter","setCardsQuestFilter","chatActive","setChatActive","textIcon","setTextIcon","printContainers","setTimeout","fetch","then","res","json","length","resResult","filter","response_id","newContainer","takeCard","error","console","log","stock","i","resulted","id","method","headers","result","stockFilter","quest","stockRes","stockCategory","selectResponse","cardId","index","stockContainers","numberCard","containerIndex","stockResponseSelected","a","b","c","nbRes","card","includes","splice","window","scrollTo","document","body","scrollHeight","activeChat","Array","isArray","map","container","content_type","content"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react'\nimport Questionchat from '../questionBlock/QuestionChat';\nimport FormContact from '../fromContact/FormContact';\nimport cross from './image/cross.png'\nimport logo from './image/logo.png'\nimport './ChatBotArea.css'\n\nconst ChatBotArea = ({modelId, userId}) => {\n    const [containers, setContainers] = useState([])\n    const [cardsQuest, setCardsQuest] = useState([])\n    const [cardsRes, setCardsRes] = useState([])\n    const [cardsCategory, setCardsCategory] = useState([])\n    const [responseSelect, setResponseSelect] = useState(0)\n    const [storageContainers, setStorageContainers] = useState()\n    const [responseSelected, setResponseSelected] = useState([])\n    const [pair, setPair] = useState(false)\n    const [cardsQuestFilter, setCardsQuestFilter] = useState([])\n    const [chatActive, setChatActive] = useState(false)\n    const [textIcon, setTextIcon] = useState(true)\n\n    useEffect(() => {\n        printContainers()\n    },[userId, responseSelected])\n\n    useEffect(() => {\n        setTimeout(() => {\n            setTextIcon(false)\n        }, 7000)\n    })\n\n    const printContainers = async () => {\n        try{\n            fetch(`http://192.168.43.193:8000/api/container/findAll/${userId}/${responseSelect}/${modelId}`)\n            .then(res => res.json())\n            .then(res => {\n                if(res.length){\n                    if(storageContainers){\n                        let resResult = res.filter(res => res.response_id != null)\n                        let newContainer = [...storageContainers, ...resResult]\n                        setContainers(newContainer)\n                        takeCard(newContainer)\n                    } else {\n                        setContainers(res)\n                        takeCard(res)\n                    }\n                }\n            })\n            \n            \n        } catch(error) {\n            console.log(error)\n        }\n        setStorageContainers(containers)\n    }\n\n    const takeCard = async (res) => {\n        let stock = []\n        for(let i = 0; i < res.length + 3; i++){\n            if(res[i]){\n                let resulted = await fetch(`http://192.168.43.193:8000/api/relation/findCardQuestion/${res[i].id}/${userId}/${modelId}`, {\n                    method: 'GET',\n                    headers: {\n                    'Content-Type' :'application/json'\n                    }\n                })\n                const result = await resulted.json()\n                stock = [...stock, result]\n            }\n        }\n        if(stock.length){\n\n        setCardsQuest(stock)\n        const stockFilter = await stock.filter(quest => quest[0])\n        setCardsQuestFilter(stockFilter)\n\n        }\n\n\n        let stockRes = []\n        for(let i = 0; i < res.length + 3; i++){\n            if(res[i]){\n                let resulted = await fetch(`http://192.168.43.193:8000/api/relation/findCardResponse/${res[i].id}/${userId}/${modelId}`, {\n                    method: 'GET',\n                    headers: {\n                    'Content-Type' :'application/json'\n                    }\n                })\n                const result = await resulted.json()\n                stockRes = [...stockRes, result]\n            }\n        }\n        setCardsRes(stockRes)\n        let stockCategory = []\n        for(let i = 0; i < res.length + 3; i++){\n            if(typeof res[i] === 'object'){\n                let resulted = await fetch(`http://192.168.43.193:8000/api/relation/findCardCategory/${res[i].id}/${userId}/${modelId}`, {\n                    method: 'GET',\n                    headers: {\n                    'Content-Type' :'application/json'\n                    }\n                })\n                const result = await resulted.json()\n                stockCategory = [...stockCategory, result]\n            }\n        }\n        setCardsCategory(stockCategory)\n    }\n\n    const selectResponse = async function (cardId, index) {\n        setPair(!pair)\n        const stockContainers = containers\n        const numberCard = cardId\n        const containerIndex = index + 1\n        setResponseSelect(numberCard)\n\n        \n\n        responseSelected.length = cardId\n        stockContainers.length = containerIndex\n\n        \n        let stockResponseSelected = ([...responseSelected, numberCard])\n\n            for(let a = 0; a < cardsRes.length; a++){\n                if(cardsRes[a].length){\n                    for(let b = 0; b < cardsRes[a].length; b++){\n                            for(let c = 0; c < stockResponseSelected.length; c++){\n                                const nbRes = cardsRes[a].filter(card => stockResponseSelected.includes(card.id))\n                                if(nbRes.length > 1){\n                                    for(let i = 0; i < stockResponseSelected.length; i++){\n                                        for(let a = 0; a < nbRes.length - 1; a++){\n                                            if(nbRes[a].id === (stockResponseSelected[i])){\n                                                stockResponseSelected.splice(i, 1)\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n        setResponseSelected(stockResponseSelected)\n\n        setStorageContainers(stockContainers)\n\n        if(stockContainers){\n            printContainers()\n        }\n\n        setTimeout(() => {\n            window.scrollTo(0,document.body.scrollHeight);\n        }, 700)\n    }\n\n\n    const activeChat = () => {\n        setChatActive(true)\n    }\n    \n\n    \n\n    return(\n        <div className={!chatActive ? \"containerIconChat\" : \"containerChatbot\"}>\n            {chatActive &&\n                <div className=\"headChatbot\">\n                    <img onClick={() => {setChatActive(!chatActive)}} alt=\"close sortouch\" src={cross} className=\"crossChatbot\"/>\n                    <a target=\"__blank\" href=\"https://sortouch.com\" className=\"sortouch\">Sortouch</a>\n                </div>}\n            <div className={chatActive ? \"contentChatbot\" : \"contentIcon\"}>\n            {!chatActive ?\n            <div className=\"contentTe\">\n                {textIcon &&\n                <div className=\"contentTextIconChat\">\n                    <p onClick={activeChat} className=\"textIconCard\"><Questionchat text={\"Prenez contact avec moi !\"}/></p>\n                </div>}\n                <img alt=\"icon chat\" onClick={activeChat} src={logo} className=\"iconChat\"/>\n            </div>\n            :\n            Array.isArray(containers) &&\n            containers.map((container, index) => {\n                return(\n                    <div className={container.content_type === \"question\" && index%3 !== 0 ? \"contentQuestionChat\" : container.content_type === \"question\" && index%3 === 0 ? \"contentQuestionChatDecale\" : container.content_type === \"response\" ? \"contentResponseChat\" : \"contentDestinationChat\"}>\n                            {Array.isArray(cardsQuest[index]) && container.content_type === \"question\" &&\n                                cardsQuest[index].map(card => {\n                                    return(\n                                        cardsQuestFilter[cardsQuestFilter.length - 1] && card.id === cardsQuestFilter[cardsQuestFilter.length - 1][0].id ?\n                                        <div className=\"contentQuestChat\">\n                                            <Questionchat text={card.content}/>\n                                            <img alt=\"sortouch\" src={logo} className=\"logoChat\"/>\n                                        </div>\n                                        :\n                                        <div className=\"contentQuestChat\">\n                                            <p className=\"textQuest\">{card.content}</p>\n                                            <img alt=\"sortouch\" src={logo} className=\"logoChat\"/>\n                                        </div>\n                                    )\n                                })}\n                            {Array.isArray(cardsRes[index]) && container.content_type === \"response\" &&\n                                cardsRes[index].map(card => {\n                                    return(\n                                        <div onClick={() => {selectResponse(card.id, index)}}   className={responseSelected.includes(card.id) ? 'containerCardResChatActive' : 'containerCardResChat'}>\n                                            <p id={`container${index}`} className=\"textCardResChat\">{card.content}</p>\n                                        </div>)\n                                        })\n                                    }\n                            {Array.isArray(cardsCategory[index]) && container.content_type === \"category\" &&\n                                cardsCategory[index].map(card => {\n                                    return(\n                                        <FormContact categoryId={card.id} userId={userId} modelId={modelId} />\n                                    )\n                                })}\n                    </div>\n                )\n            })}\n            </div>\n        </div>\n    )\n}\n\nexport default ChatBotArea"]},"metadata":{},"sourceType":"module"}