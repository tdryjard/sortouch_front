{"ast":null,"code":"var _jsxFileName = \"/home/thomas/navebe/front/src/components/data_area/DataArea.js\";\nimport React, { useEffect, useState } from 'react';\nimport Navbar from '../navbar/Navbar';\nimport MenuBurger from '../menuBurger/MenuBurger';\nimport url from '../../api/url';\nimport './DataArea.scss';\n\nconst DataArea = () => {\n  const [mails, setMails] = useState();\n  const [userId, setUserId] = useState();\n  const [modelId, setModelId] = useState();\n  const [token, setToken] = useState();\n  const [choiceModel, setChoiceModel] = useState('Tout');\n  const [choiceCategory, setChoiceCategory] = useState('Tout');\n  const [models, setModels] = useState([]);\n  const [selectModel, setSelectModel] = useState(false);\n  const [categorys, setCategorys] = useState([]);\n  const [categorySelect, setCategorySelect] = useState();\n  const [selectCategory, setSelectCategory] = useState(false);\n  const [categoryId, setCategoryId] = useState();\n  const [contacts, setContacts] = useState([]);\n  const [contactsFilter, setContactsFilter] = useState([]);\n  const [chooseColor, setChooseColor] = useState(false);\n  const [chooseColorId, setChooseColorId] = useState();\n  const [colorSort, setColorSort] = useState('');\n  const [colorParamsSelect, setColorParamsSelect] = useState(false);\n  useEffect(() => {\n    if (localStorage.getItem('userId')) {\n      setUserId(localStorage.getItem('userId'));\n      setToken(localStorage.getItem('token'));\n    } else {\n      setUserId(sessionStorage.getItem('userId'));\n      setToken(sessionStorage.getItem('token'));\n    }\n  }, []);\n  useEffect(() => {\n    findAll();\n  }, [userId, token, modelId]);\n  console.log(userId);\n\n  const findAll = () => {\n    fetch(`${url}/mail/findByUser/${userId}`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Acces-Control-Allow-Origin': {\n          origin\n        },\n        'authorization': token\n      }\n    }).then(res => res.json()).then(res => console.log(res));\n  };\n\n  useEffect(() => {\n    fetch(`${url}/model/findAll/${userId}`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Acces-Control-Allow-Origin': {\n          origin\n        },\n        'authorization': token\n      }\n    }).then(res => res.json()).then(res => setModels(res));\n  }, [userId, token]);\n  useEffect(() => {\n    fetch(`${url}/category/findAll/${userId}/${modelId}`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Acces-Control-Allow-Origin': {\n          origin\n        },\n        'authorization': token\n      }\n    }).then(res => res.json()).then(res => {\n      setCategorys(res);\n      if (!categorySelect && res[0]) setCategorySelect(res[0].id);\n    });\n  }, [userId, modelId]);\n  useEffect(() => {\n    fetch(`${url}/mail/findByUser/${userId}`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Acces-Control-Allow-Origin': {\n          origin\n        },\n        'authorization': token\n      }\n    }).then(res => res.json()).then(res => {\n      setContacts(res);\n      setContactsFilter(res);\n    });\n  }, [userId]);\n\n  const modelSelectFunction = model => {\n    console.log(model.id);\n    setSelectModel(false);\n    setChoiceModel(model.name);\n    setModelId(model.id);\n    let sortModel = contacts.filter(contact => contact.model_id === model.id);\n    let sortCategory = [];\n    let sortC;\n\n    if (colorSort) {\n      stockContacts = contacts.filter(contact => contact.color === colorSort);\n    }\n\n    if (categoryId) {\n      stockContacts = contacts.filter(contact => contact.category_id === categoryId);\n    }\n\n    setContactsFilter(stockContacts);\n  };\n\n  const categorySelectFunction = category => {\n    setSelectCategory(false);\n    setChoiceCategory(category.name);\n    setCategoryId(category.id);\n    let stockContacts = contacts.filter(contact => contact.category_id === category.id);\n\n    if (colorSort) {\n      stockContacts = contacts.filter(contact => contact.color === colorSort);\n    }\n\n    if (modelId) {\n      stockContacts = contacts.filter(contact => contact.model_id === modelId);\n    }\n\n    setContactsFilter(stockContacts);\n  };\n\n  const changeColor = (mailId, color) => {\n    fetch(`${url}/mail/update/${userId}/${modelId}/${categoryId}/${mailId}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': `${origin}`,\n        'authorization': token\n      },\n      body: JSON.stringify({\n        color: color\n      })\n    });\n    setChooseColor(false);\n  };\n\n  const getColorParams = color => {\n    console.log(contacts);\n    console.log(color);\n    setColorSort(color);\n\n    if (color) {\n      let stockContacts = [];\n\n      if (categoryId) {\n        stockContacts = contacts.filter(contact => contact.category_id === categoryId);\n      }\n\n      if (modelId) {\n        stockContacts = contacts.filter(contact => contact.model_id === modelId);\n      }\n\n      stockContacts = contacts.filter(contact => contact.color === color);\n      setContactsFilter(stockContacts);\n    } else {\n      setContactsFilter(contacts);\n    }\n\n    setColorParamsSelect(false);\n  };\n\n  console.log(contacts);\n  return React.createElement(\"div\", {\n    className: \"containerModelArea\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170\n    },\n    __self: this\n  }, window.innerWidth > 1280 ? React.createElement(Navbar, {\n    type: \"data\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172\n    },\n    __self: this\n  }) : React.createElement(MenuBurger, {\n    type: \"models\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"headSearchData\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"choiceSearchData\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    onClick: () => {\n      setSelectModel(!selectModel);\n    },\n    className: \"textChoiceDataGet\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177\n    },\n    __self: this\n  }, choiceModel)), choiceModel !== 'Tout' && React.createElement(\"div\", {\n    className: \"choiceSearchData\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    onClick: () => {\n      setSelectCategory(!selectCategory);\n    },\n    className: \"textChoiceDataGet\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181\n    },\n    __self: this\n  }, choiceCategory)), React.createElement(\"div\", {\n    className: \"containerColorParams\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    onClick: () => {\n      setColorParamsSelect(!colorParamsSelect);\n    },\n    src: require('./image/color_icon.png'),\n    className: \"colorIcon\",\n    alt: \"choose color\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184\n    },\n    __self: this\n  }), colorParamsSelect && React.createElement(\"div\", {\n    className: \"containerChoiceColor\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    onClick: () => {\n      getColorParams('Green');\n    },\n    className: \"colorGreen\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    onClick: () => {\n      getColorParams('Blue');\n    },\n    className: \"colorBlue\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    onClick: () => {\n      getColorParams('Orange');\n    },\n    className: \"colorOrange\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    onClick: () => {\n      getColorParams('Red');\n    },\n    className: \"colorRed\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    onClick: () => {\n      getColorParams('');\n    },\n    className: \"colorWhite\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191\n    },\n    __self: this\n  })))), React.createElement(\"div\", {\n    className: \"contentDataArea\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195\n    },\n    __self: this\n  }, selectModel && React.createElement(\"div\", {\n    className: \"listModelsData\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197\n    },\n    __self: this\n  }, models.length && models.map(model => {\n    return React.createElement(\"p\", {\n      className: \"textChoiceData\",\n      onClick: () => {\n        modelSelectFunction(model);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }, model.name);\n  })), selectCategory && React.createElement(\"div\", {\n    className: \"listCategorysData\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205\n    },\n    __self: this\n  }, categorys.length && categorys.map(category => {\n    return React.createElement(\"p\", {\n      className: \"textChoiceData\",\n      onClick: () => {\n        categorySelectFunction(category);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }, category.name);\n  })), contactsFilter.length && contactsFilter.map((contact, index) => {\n    return React.createElement(\"div\", {\n      className: contact.color ? `containerContact${contact.color}` : \"containerContact\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: \"contentInfoContact\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    }, contact.phone), React.createElement(\"p\", {\n      className: \"contentInfoContact\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216\n      },\n      __self: this\n    }, contact.email), React.createElement(\"div\", {\n      className: \"containerColors\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    }, !contact.color ? React.createElement(\"img\", {\n      onClick: () => {\n        setChooseColor(!chooseColor);\n        setChooseColorId(contact.id);\n      },\n      src: require('./image/color_icon.png'),\n      className: \"colorIcon\",\n      alt: \"choose color\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    }) : React.createElement(\"div\", {\n      onClick: () => {\n        setChooseColor(!chooseColor);\n        setChooseColorId(contact.id);\n      },\n      className: `colorIcon${contact.color}`,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221\n      },\n      __self: this\n    }), chooseColor && chooseColorId === contact.id && React.createElement(\"div\", {\n      className: \"containerChoiceColor\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      onClick: () => {\n        changeColor(contact.id, \"Green\");\n      },\n      className: \"colorGreen\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      onClick: () => {\n        changeColor(contact.id, \"Blue\");\n      },\n      className: \"colorBlue\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      onClick: () => {\n        changeColor(contact.id, \"Orange\");\n      },\n      className: \"colorOrange\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      onClick: () => {\n        changeColor(contact.id, \"Red\");\n      },\n      className: \"colorRed\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      onClick: () => {\n        changeColor(contact.id, \"\");\n      },\n      className: \"colorWhite\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228\n      },\n      __self: this\n    }))));\n  })));\n};\n\nexport default DataArea;","map":{"version":3,"sources":["/home/thomas/navebe/front/src/components/data_area/DataArea.js"],"names":["React","useEffect","useState","Navbar","MenuBurger","url","DataArea","mails","setMails","userId","setUserId","modelId","setModelId","token","setToken","choiceModel","setChoiceModel","choiceCategory","setChoiceCategory","models","setModels","selectModel","setSelectModel","categorys","setCategorys","categorySelect","setCategorySelect","selectCategory","setSelectCategory","categoryId","setCategoryId","contacts","setContacts","contactsFilter","setContactsFilter","chooseColor","setChooseColor","chooseColorId","setChooseColorId","colorSort","setColorSort","colorParamsSelect","setColorParamsSelect","localStorage","getItem","sessionStorage","findAll","console","log","fetch","method","headers","origin","then","res","json","id","modelSelectFunction","model","name","sortModel","filter","contact","model_id","sortCategory","sortC","stockContacts","color","category_id","categorySelectFunction","category","changeColor","mailId","body","JSON","stringify","getColorParams","window","innerWidth","require","length","map","index","phone","email"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport Navbar from '../navbar/Navbar'\nimport MenuBurger from '../menuBurger/MenuBurger'\nimport url from '../../api/url'\nimport './DataArea.scss'\n\n\nconst DataArea = () => {\n    const [mails, setMails] = useState()\n    const [userId, setUserId] = useState()\n    const [modelId, setModelId] = useState()\n    const [token, setToken] = useState()\n    const [choiceModel, setChoiceModel] = useState('Tout')\n    const [choiceCategory, setChoiceCategory] = useState('Tout')\n    const [models, setModels] = useState([])\n    const [selectModel, setSelectModel] = useState(false)\n    const [categorys, setCategorys] = useState([])\n    const [categorySelect, setCategorySelect] = useState()\n    const [selectCategory, setSelectCategory] = useState(false)\n    const [categoryId, setCategoryId] = useState()\n    const [contacts, setContacts] = useState([])\n    const [contactsFilter, setContactsFilter] = useState([])\n    const [chooseColor, setChooseColor] = useState(false)\n    const [chooseColorId, setChooseColorId] = useState()\n    const [colorSort, setColorSort] = useState('')\n    const [colorParamsSelect, setColorParamsSelect] = useState(false)\n\n    useEffect(() => {\n        if (localStorage.getItem('userId')) {\n            setUserId(localStorage.getItem('userId'))\n            setToken(localStorage.getItem('token'))\n        } else {\n            setUserId(sessionStorage.getItem('userId'))\n            setToken(sessionStorage.getItem('token'))\n        }\n    }, [])\n\n    useEffect(() => {\n        findAll()\n    }, [userId, token, modelId])\n\n    console.log(userId)\n\n    const findAll = () => {\n        fetch(`${url}/mail/findByUser/${userId}`, {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n                'Acces-Control-Allow-Origin': { origin },\n                'authorization': token\n            }\n        })\n            .then(res => res.json())\n            .then(res => console.log(res))\n    }\n\n    useEffect(() => {\n        fetch(`${url}/model/findAll/${userId}`, {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n                'Acces-Control-Allow-Origin': { origin },\n                'authorization': token\n            }\n        })\n            .then(res => res.json())\n            .then(res => setModels(res))\n    }, [userId, token])\n\n    useEffect(() => {\n        fetch(`${url}/category/findAll/${userId}/${modelId}`, {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n                'Acces-Control-Allow-Origin': { origin },\n                'authorization': token\n            }\n        })\n            .then(res => res.json())\n            .then(res => {\n                setCategorys(res)\n                if (!categorySelect && res[0]) setCategorySelect(res[0].id)\n            })\n    }, [userId, modelId])\n\n    useEffect(() => {\n        fetch(`${url}/mail/findByUser/${userId}`, {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n                'Acces-Control-Allow-Origin': { origin },\n                'authorization': token\n            }\n        })\n            .then(res => res.json())\n            .then(res => {\n                setContacts(res)\n                setContactsFilter(res)\n            })\n    }, [userId])\n\n\n    const modelSelectFunction = (model) => {\n        console.log(model.id)\n        setSelectModel(false)\n        setChoiceModel(model.name)\n        setModelId(model.id)\n        let sortModel = contacts.filter(contact => contact.model_id === model.id)\n        let sortCategory = []\n        let sortC\n        if(colorSort){\n            stockContacts = contacts.filter(contact => contact.color === colorSort)\n        } if(categoryId){\n            stockContacts = contacts.filter(contact => contact.category_id === categoryId)\n        }\n        setContactsFilter(stockContacts)\n    }\n\n    const categorySelectFunction = (category) => {\n        setSelectCategory(false)\n        setChoiceCategory(category.name)\n        setCategoryId(category.id)\n        let stockContacts = contacts.filter(contact => contact.category_id === category.id)\n        if(colorSort){\n            stockContacts = contacts.filter(contact => contact.color === colorSort)\n        } if(modelId){\n            stockContacts = contacts.filter(contact => contact.model_id === modelId)\n        }\n        setContactsFilter(stockContacts)\n    }\n\n    const changeColor = (mailId, color) => {\n        fetch(`${url}/mail/update/${userId}/${modelId}/${categoryId}/${mailId}`, {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json',\n                'Access-Control-Allow-Origin': `${origin}`,\n                'authorization': token\n            },\n            body: JSON.stringify({\n                color: color\n            })\n        })\n        setChooseColor(false)\n    }\n\n    const getColorParams = (color) => {\n        console.log(contacts)\n        console.log(color)\n        setColorSort(color)\n        if (color) {\n            let stockContacts = []\n            if(categoryId){\n                stockContacts = contacts.filter(contact => contact.category_id === categoryId)\n            } if(modelId){\n                stockContacts = contacts.filter(contact => contact.model_id === modelId)\n            }\n            stockContacts = contacts.filter(contact => contact.color === color)\n            setContactsFilter(stockContacts)\n        } else{\n            setContactsFilter(contacts)\n        }\n        setColorParamsSelect(false)\n    }\n\n\n    console.log(contacts)\n\n    return (\n        <div className=\"containerModelArea\">\n            {window.innerWidth > 1280 ?\n                <Navbar type={\"data\"} />\n                :\n                <MenuBurger type={\"models\"} />}\n            <div className=\"headSearchData\">\n                <div className=\"choiceSearchData\">\n                    <p onClick={() => { setSelectModel(!selectModel) }} className=\"textChoiceDataGet\">{choiceModel}</p>\n                </div>\n                {choiceModel !== 'Tout' &&\n                    <div className=\"choiceSearchData\">\n                        <p onClick={() => { setSelectCategory(!selectCategory) }} className=\"textChoiceDataGet\">{choiceCategory}</p>\n                    </div>}\n                <div className=\"containerColorParams\">\n                    <img onClick={() => { setColorParamsSelect(!colorParamsSelect) }} src={require('./image/color_icon.png')} className=\"colorIcon\" alt=\"choose color\" />\n                    {colorParamsSelect &&\n                    <div className=\"containerChoiceColor\">\n                        <div onClick={() => { getColorParams('Green') }} className=\"colorGreen\" />\n                        <div onClick={() => { getColorParams('Blue') }} className=\"colorBlue\" />\n                        <div onClick={() => { getColorParams('Orange') }} className=\"colorOrange\" />\n                        <div onClick={() => { getColorParams('Red') }} className=\"colorRed\" />\n                        <div onClick={() => { getColorParams('') }} className=\"colorWhite\" />\n                    </div>}\n                </div>\n            </div>\n            <div className=\"contentDataArea\">\n                {selectModel &&\n                    <div className=\"listModelsData\">\n                        {models.length && models.map(model => {\n                            return (\n                                <p className=\"textChoiceData\" onClick={() => { modelSelectFunction(model) }}>{model.name}</p>\n                            )\n                        })}\n                    </div>}\n                {selectCategory &&\n                    <div className=\"listCategorysData\">\n                        {categorys.length && categorys.map(category => {\n                            return (\n                                <p className=\"textChoiceData\" onClick={() => { categorySelectFunction(category) }}>{category.name}</p>\n                            )\n                        })}\n                    </div>}\n                {contactsFilter.length && contactsFilter.map((contact, index) => {\n                    return (\n                        <div className={contact.color ? `containerContact${contact.color}` : \"containerContact\"}>\n                            <p className=\"contentInfoContact\">{contact.phone}</p>\n                            <p className=\"contentInfoContact\">{contact.email}</p>\n                            <div className=\"containerColors\">\n                                {!contact.color ?\n                                    <img onClick={() => { setChooseColor(!chooseColor); setChooseColorId(contact.id) }} src={require('./image/color_icon.png')} className=\"colorIcon\" alt=\"choose color\" />\n                                    :\n                                    <div onClick={() => { setChooseColor(!chooseColor); setChooseColorId(contact.id) }} className={`colorIcon${contact.color}`} />}\n                                {chooseColor && chooseColorId === contact.id &&\n                                    <div className=\"containerChoiceColor\">\n                                        <div onClick={() => { changeColor(contact.id, \"Green\") }} className=\"colorGreen\" />\n                                        <div onClick={() => { changeColor(contact.id, \"Blue\") }} className=\"colorBlue\" />\n                                        <div onClick={() => { changeColor(contact.id, \"Orange\") }} className=\"colorOrange\" />\n                                        <div onClick={() => { changeColor(contact.id, \"Red\") }} className=\"colorRed\" />\n                                        <div onClick={() => { changeColor(contact.id, \"\") }} className=\"colorWhite\" />\n                                    </div>}\n                            </div>\n                        </div>\n                    )\n                })}\n            </div>\n        </div>\n    )\n}\n\nexport default DataArea"]},"metadata":{},"sourceType":"module"}