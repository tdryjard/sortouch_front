{"ast":null,"code":"var _jsxFileName = \"/home/thomas/navebe/front/src/components/data_area/DataArea.js\";\nimport React, { useEffect, useState } from 'react';\nimport Navbar from '../navbar/Navbar';\nimport MenuBurger from '../menuBurger/MenuBurger';\nimport url from '../../api/url';\nimport './DataArea.scss';\n\nconst DataArea = () => {\n  const [mails, setMails] = useState();\n  const [userId, setUserId] = useState();\n  const [modelId, setModelId] = useState();\n  const [token, setToken] = useState();\n  const [choiceModel, setChoiceModel] = useState('Tout');\n  const [choiceCategory, setChoiceCategory] = useState('Tout');\n  const [models, setModels] = useState([]);\n  const [selectModel, setSelectModel] = useState(false);\n  const [categorys, setCategorys] = useState([]);\n  const [categorySelect, setCategorySelect] = useState();\n  const [selectCategory, setSelectCategory] = useState(false);\n  const [categoryId, setCategoryId] = useState();\n  const [contacts, setContacts] = useState([]);\n  const [chooseColor, setChooseColor] = useState(false);\n  const [chooseColorId, setChooseColorId] = useState();\n  const [colorParams, setColorParams] = useState('');\n  const [colorParamsSelect, setColorParamsSelect] = useState(false);\n  useEffect(() => {\n    if (localStorage.getItem('userId')) {\n      setUserId(localStorage.getItem('userId'));\n      setToken(localStorage.getItem('token'));\n    } else {\n      setUserId(sessionStorage.getItem('userId'));\n      setToken(sessionStorage.getItem('token'));\n    }\n  }, []);\n  useEffect(() => {\n    findAll();\n  }, [userId, token, modelId]);\n  console.log(userId);\n\n  const findAll = () => {\n    fetch(`${url}/mail/findByUser/${userId}`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Acces-Control-Allow-Origin': {\n          origin\n        },\n        'authorization': token\n      }\n    }).then(res => res.json()).then(res => console.log(res));\n  };\n\n  useEffect(() => {\n    fetch(`${url}/model/findAll/${userId}`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Acces-Control-Allow-Origin': {\n          origin\n        },\n        'authorization': token\n      }\n    }).then(res => res.json()).then(res => setModels(res));\n  }, [userId, token]);\n  useEffect(() => {\n    fetch(`${url}/category/findAll/${userId}/${modelId}`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Acces-Control-Allow-Origin': {\n          origin\n        },\n        'authorization': token\n      }\n    }).then(res => res.json()).then(res => {\n      setCategorys(res);\n      if (!categorySelect && res[0]) setCategorySelect(res[0].id);\n    });\n  }, [userId, modelId]);\n  useEffect(() => {\n    fetch(`${url}/mail/findByUser/${userId}`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Acces-Control-Allow-Origin': {\n          origin\n        },\n        'authorization': token\n      }\n    }).then(res => res.json()).then(res => {\n      setContacts(res);\n    });\n  }, [userId]);\n\n  const modelSelectFunction = model => {\n    console.log(model.id);\n    setSelectModel(false);\n    setChoiceModel(model.name);\n    setModelId(model.id);\n    setockContacts;\n  };\n\n  const categorySelectFunction = category => {\n    setSelectCategory(false);\n    setChoiceCategory(category.name);\n    setCategoryId(category.id);\n  };\n\n  const changeColor = (mailId, color) => {\n    fetch(`${url}/mail/update/${userId}/${modelId}/${categoryId}/${mailId}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': `${origin}`,\n        'authorization': token\n      },\n      body: JSON.stringify({\n        color: color\n      })\n    });\n    setChooseColor(false);\n  };\n\n  const getColorParams = color => {\n    if (color) {\n      const stockContacts = contacts.filter(contact => contact.color === color);\n      setContacts(stockContacts);\n    }\n\n    setColorParamsSelect(false);\n  };\n\n  console.log(contacts);\n  return React.createElement(\"div\", {\n    className: \"containerModelArea\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  }, window.innerWidth > 1280 ? React.createElement(Navbar, {\n    type: \"data\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145\n    },\n    __self: this\n  }) : React.createElement(MenuBurger, {\n    type: \"models\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"headSearchData\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"choiceSearchData\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    onClick: () => {\n      setSelectModel(!selectModel);\n    },\n    className: \"textChoiceDataGet\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150\n    },\n    __self: this\n  }, choiceModel)), choiceModel !== 'Tout' && React.createElement(\"div\", {\n    className: \"choiceSearchData\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    onClick: () => {\n      setSelectCategory(!selectCategory);\n    },\n    className: \"textChoiceDataGet\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154\n    },\n    __self: this\n  }, choiceCategory)), React.createElement(\"div\", {\n    className: \"containerColorParams\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    onClick: () => {\n      setColorParamsSelect(!colorParamsSelect);\n    },\n    src: require('./image/color_icon.png'),\n    className: \"colorIcon\",\n    alt: \"choose color\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157\n    },\n    __self: this\n  }), colorParamsSelect && React.createElement(\"div\", {\n    className: \"containerChoiceColor\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    onClick: () => {\n      getColorParams('Green');\n    },\n    className: \"colorGreen\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    onClick: () => {\n      getColorParams('Blue');\n    },\n    className: \"colorBlue\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    onClick: () => {\n      getColorParams('Orange');\n    },\n    className: \"colorOrange\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    onClick: () => {\n      getColorParams('Red');\n    },\n    className: \"colorRed\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    onClick: () => {\n      getColorParams('');\n    },\n    className: \"colorWhite\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164\n    },\n    __self: this\n  })))), React.createElement(\"div\", {\n    className: \"contentDataArea\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168\n    },\n    __self: this\n  }, selectModel && React.createElement(\"div\", {\n    className: \"listModelsData\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170\n    },\n    __self: this\n  }, models.length && models.map(model => {\n    return React.createElement(\"p\", {\n      className: \"textChoiceData\",\n      onClick: () => {\n        modelSelectFunction(model);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }, model.name);\n  })), selectCategory && React.createElement(\"div\", {\n    className: \"listCategorysData\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178\n    },\n    __self: this\n  }, categorys.length && categorys.map(category => {\n    return React.createElement(\"p\", {\n      className: \"textChoiceData\",\n      onClick: () => {\n        categorySelectFunction(category);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }, category.name);\n  })), contacts.length && contacts.map((contact, index) => {\n    return React.createElement(\"div\", {\n      className: contact.color ? `containerContact${contact.color}` : \"containerContact\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: \"contentInfoContact\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }, contact.phone), React.createElement(\"p\", {\n      className: \"contentInfoContact\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }, contact.email), React.createElement(\"div\", {\n      className: \"containerColors\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }, !contact.color ? React.createElement(\"img\", {\n      onClick: () => {\n        setChooseColor(!chooseColor);\n        setChooseColorId(contact.id);\n      },\n      src: require('./image/color_icon.png'),\n      className: \"colorIcon\",\n      alt: \"choose color\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }) : React.createElement(\"div\", {\n      onClick: () => {\n        setChooseColor(!chooseColor);\n        setChooseColorId(contact.id);\n      },\n      className: `colorIcon${contact.color}`,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }), chooseColor && chooseColorId === contact.id && React.createElement(\"div\", {\n      className: \"containerChoiceColor\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      onClick: () => {\n        changeColor(contact.id, \"Green\");\n      },\n      className: \"colorGreen\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      onClick: () => {\n        changeColor(contact.id, \"Blue\");\n      },\n      className: \"colorBlue\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      onClick: () => {\n        changeColor(contact.id, \"Orange\");\n      },\n      className: \"colorOrange\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      onClick: () => {\n        changeColor(contact.id, \"Red\");\n      },\n      className: \"colorRed\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      onClick: () => {\n        changeColor(contact.id, \"\");\n      },\n      className: \"colorWhite\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }))));\n  })));\n};\n\nexport default DataArea;","map":{"version":3,"sources":["/home/thomas/navebe/front/src/components/data_area/DataArea.js"],"names":["React","useEffect","useState","Navbar","MenuBurger","url","DataArea","mails","setMails","userId","setUserId","modelId","setModelId","token","setToken","choiceModel","setChoiceModel","choiceCategory","setChoiceCategory","models","setModels","selectModel","setSelectModel","categorys","setCategorys","categorySelect","setCategorySelect","selectCategory","setSelectCategory","categoryId","setCategoryId","contacts","setContacts","chooseColor","setChooseColor","chooseColorId","setChooseColorId","colorParams","setColorParams","colorParamsSelect","setColorParamsSelect","localStorage","getItem","sessionStorage","findAll","console","log","fetch","method","headers","origin","then","res","json","id","modelSelectFunction","model","name","setockContacts","categorySelectFunction","category","changeColor","mailId","color","body","JSON","stringify","getColorParams","stockContacts","filter","contact","window","innerWidth","require","length","map","index","phone","email"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport Navbar from '../navbar/Navbar'\nimport MenuBurger from '../menuBurger/MenuBurger'\nimport url from '../../api/url'\nimport './DataArea.scss'\n\n\nconst DataArea = () => {\n    const [mails, setMails] = useState()\n    const [userId, setUserId] = useState()\n    const [modelId, setModelId] = useState()\n    const [token, setToken] = useState()\n    const [choiceModel, setChoiceModel] = useState('Tout')\n    const [choiceCategory, setChoiceCategory] = useState('Tout')\n    const [models, setModels] = useState([])\n    const [selectModel, setSelectModel] = useState(false)\n    const [categorys, setCategorys] = useState([])\n    const [categorySelect, setCategorySelect] = useState()\n    const [selectCategory, setSelectCategory] = useState(false)\n    const [categoryId, setCategoryId] = useState()\n    const [contacts, setContacts] = useState([])\n    const [chooseColor, setChooseColor] = useState(false)\n    const [chooseColorId, setChooseColorId] = useState()\n    const [colorParams, setColorParams] = useState('')\n    const [colorParamsSelect, setColorParamsSelect] = useState(false)\n\n    useEffect(() => {\n        if (localStorage.getItem('userId')) {\n            setUserId(localStorage.getItem('userId'))\n            setToken(localStorage.getItem('token'))\n        } else {\n            setUserId(sessionStorage.getItem('userId'))\n            setToken(sessionStorage.getItem('token'))\n        }\n    }, [])\n\n    useEffect(() => {\n        findAll()\n    }, [userId, token, modelId])\n\n    console.log(userId)\n\n    const findAll = () => {\n        fetch(`${url}/mail/findByUser/${userId}`, {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n                'Acces-Control-Allow-Origin': { origin },\n                'authorization': token\n            }\n        })\n            .then(res => res.json())\n            .then(res => console.log(res))\n    }\n\n    useEffect(() => {\n        fetch(`${url}/model/findAll/${userId}`, {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n                'Acces-Control-Allow-Origin': { origin },\n                'authorization': token\n            }\n        })\n            .then(res => res.json())\n            .then(res => setModels(res))\n    }, [userId, token])\n\n    useEffect(() => {\n        fetch(`${url}/category/findAll/${userId}/${modelId}`, {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n                'Acces-Control-Allow-Origin': { origin },\n                'authorization': token\n            }\n        })\n            .then(res => res.json())\n            .then(res => {\n                setCategorys(res)\n                if (!categorySelect && res[0]) setCategorySelect(res[0].id)\n            })\n    }, [userId, modelId])\n\n    useEffect(() => {\n        fetch(`${url}/mail/findByUser/${userId}`, {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n                'Acces-Control-Allow-Origin': { origin },\n                'authorization': token\n            }\n        })\n            .then(res => res.json())\n            .then(res => {\n                setContacts(res)\n            })\n    }, [userId])\n\n\n\n    const modelSelectFunction = (model) => {\n        console.log(model.id)\n        setSelectModel(false)\n        setChoiceModel(model.name)\n        setModelId(model.id)\n        setockContacts \n    }\n\n    const categorySelectFunction = (category) => {\n        setSelectCategory(false)\n        setChoiceCategory(category.name)\n        setCategoryId(category.id)\n    }\n\n    const changeColor = (mailId, color) => {\n        fetch(`${url}/mail/update/${userId}/${modelId}/${categoryId}/${mailId}`, {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json',\n                'Access-Control-Allow-Origin': `${origin}`,\n                'authorization': token\n            },\n            body: JSON.stringify({\n                color: color\n            })\n        })\n        setChooseColor(false)\n    }\n\n    const getColorParams = (color) => {\n        if (color) {\n            const stockContacts = contacts.filter(contact => contact.color === color)\n            setContacts(stockContacts)\n        }\n        setColorParamsSelect(false)\n    }\n\n\n    console.log(contacts)\n\n    return (\n        <div className=\"containerModelArea\">\n            {window.innerWidth > 1280 ?\n                <Navbar type={\"data\"} />\n                :\n                <MenuBurger type={\"models\"} />}\n            <div className=\"headSearchData\">\n                <div className=\"choiceSearchData\">\n                    <p onClick={() => { setSelectModel(!selectModel) }} className=\"textChoiceDataGet\">{choiceModel}</p>\n                </div>\n                {choiceModel !== 'Tout' &&\n                    <div className=\"choiceSearchData\">\n                        <p onClick={() => { setSelectCategory(!selectCategory) }} className=\"textChoiceDataGet\">{choiceCategory}</p>\n                    </div>}\n                <div className=\"containerColorParams\">\n                    <img onClick={() => { setColorParamsSelect(!colorParamsSelect) }} src={require('./image/color_icon.png')} className=\"colorIcon\" alt=\"choose color\" />\n                    {colorParamsSelect &&\n                    <div className=\"containerChoiceColor\">\n                        <div onClick={() => { getColorParams('Green') }} className=\"colorGreen\" />\n                        <div onClick={() => { getColorParams('Blue') }} className=\"colorBlue\" />\n                        <div onClick={() => { getColorParams('Orange') }} className=\"colorOrange\" />\n                        <div onClick={() => { getColorParams('Red') }} className=\"colorRed\" />\n                        <div onClick={() => { getColorParams('') }} className=\"colorWhite\" />\n                    </div>}\n                </div>\n            </div>\n            <div className=\"contentDataArea\">\n                {selectModel &&\n                    <div className=\"listModelsData\">\n                        {models.length && models.map(model => {\n                            return (\n                                <p className=\"textChoiceData\" onClick={() => { modelSelectFunction(model) }}>{model.name}</p>\n                            )\n                        })}\n                    </div>}\n                {selectCategory &&\n                    <div className=\"listCategorysData\">\n                        {categorys.length && categorys.map(category => {\n                            return (\n                                <p className=\"textChoiceData\" onClick={() => { categorySelectFunction(category) }}>{category.name}</p>\n                            )\n                        })}\n                    </div>}\n                {contacts.length && contacts.map((contact, index) => {\n                    return (\n                        <div className={contact.color ? `containerContact${contact.color}` : \"containerContact\"}>\n                            <p className=\"contentInfoContact\">{contact.phone}</p>\n                            <p className=\"contentInfoContact\">{contact.email}</p>\n                            <div className=\"containerColors\">\n                                {!contact.color ?\n                                    <img onClick={() => { setChooseColor(!chooseColor); setChooseColorId(contact.id) }} src={require('./image/color_icon.png')} className=\"colorIcon\" alt=\"choose color\" />\n                                    :\n                                    <div onClick={() => { setChooseColor(!chooseColor); setChooseColorId(contact.id) }} className={`colorIcon${contact.color}`} />}\n                                {chooseColor && chooseColorId === contact.id &&\n                                    <div className=\"containerChoiceColor\">\n                                        <div onClick={() => { changeColor(contact.id, \"Green\") }} className=\"colorGreen\" />\n                                        <div onClick={() => { changeColor(contact.id, \"Blue\") }} className=\"colorBlue\" />\n                                        <div onClick={() => { changeColor(contact.id, \"Orange\") }} className=\"colorOrange\" />\n                                        <div onClick={() => { changeColor(contact.id, \"Red\") }} className=\"colorRed\" />\n                                        <div onClick={() => { changeColor(contact.id, \"\") }} className=\"colorWhite\" />\n                                    </div>}\n                            </div>\n                        </div>\n                    )\n                })}\n            </div>\n        </div>\n    )\n}\n\nexport default DataArea"]},"metadata":{},"sourceType":"module"}